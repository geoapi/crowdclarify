{
  "name": "error-class",
  "description": "Typed errors that closely emulate the native Error class.",
  "version": "1.1.1",
  "license": "MIT",
  "author": {
    "email": "0x8890@airmail.cc",
    "url": "http://0x8890.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/0x8890/error-class"
  },
  "scripts": {
    "lint": "eslint .",
    "test": "npm run lint && node test | tap-dot"
  },
  "devDependencies": {
    "eslint": "^1.3.1",
    "eslint-config-0x8890": "^1.0.0",
    "tap-dot": "^1.0.0",
    "tapdance": "^3.0.6"
  },
  "eslintConfig": {
    "extends": "0x8890",
    "rules": {
      "func-names": 0,
      "new-cap": 0,
      "no-var": 0,
      "no-proto": 0,
      "no-new-func": 0,
      "vars-on-top": 0
    }
  },
  "files": [
    "index.js",
    "LICENSE"
  ],
  "engines": {
    "node": ">=0.10"
  },
  "keywords": [
    "error",
    "type",
    "typed",
    "custom",
    "native"
  ],
  "readme": "# Error Class\n\n[![Build Status](https://img.shields.io/travis/0x8890/error-class/master.svg?style=flat-square)](https://travis-ci.org/0x8890/error-class)\n[![npm Version](https://img.shields.io/npm/v/error-class.svg?style=flat-square)](https://www.npmjs.com/package/error-class)\n[![License](https://img.shields.io/npm/l/error-class.svg?style=flat-square)](https://raw.githubusercontent.com/0x8890/error-class/master/LICENSE)\n\nThis module provides typed errors that closely emulate the native `Error` class to a pedantic degree.\n\n```\n$ npm install error-class\n```\n\n\n## Usage\n\nThe default export is a function that accepts two arguments, the name of the typed error, and an optional function which gets invoked in the context of the error instance with the error arguments after the error setup is completed.\n\n```js\nimport errorClass from 'error-class'\n\nconst SpecialError = errorClass('SpecialError', function () {\n  if (arguments.length > 1) this.specialProperty = arguments[1]\n})\n\nconst instance = new SpecialError('baz', { foo: 'bar' })\ninstance.message // 'baz'\ninstance.specialProperty // { foo: 'bar' }\n```\n\n\n## Details\n\n```js\nimport errorClass from 'error-class'\n\nconst HumanError = errorClass('HumanError')\n\nconst hungryError = new HumanError(`I'm hungry!`)\nhungryError.name // 'HumanError'\nhungryError.message // `I'm hungry!`\nhungryError.stack // Platform-specific error stack trace.\nhungryError.hasOwnProperty('name') // false (!)\nhungryError.hasOwnProperty('message') // true\nhungryError.hasOwnProperty('stack') // true\n\n\n// Just like native errors, it doesn't require using `new`.\nconst thirstyError = HumanError(`I'm thirsty!`)\nObject.keys(thirstyError).length === 0 // True, all properties are non-enumerable.\nObject.keys(Object.getPrototypeOf(instance)).length === 0 // Prototype non-enumerable.\nthirstyError.constructor === HumanError // True.\nthirstyError.constructor.name === 'HumanError' // True.\nthirstyError instanceof Error // True, errors inherit from native `Error` class.\nthirstyError instanceof HumanError // Also true, of course.\n```\n\n\n## License\n\nThis software is licensed under the [MIT License](//github.com/0x8890/error-class/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/0x8890/error-class/issues"
  },
  "_id": "error-class@1.1.1",
  "_from": "error-class@^1.1.0"
}
