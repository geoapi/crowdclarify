{
  "name": "tapdance",
  "description": "Test harness that emits the Test Anything Protocol (TAP).",
  "version": "3.1.2",
  "license": "MIT",
  "author": {
    "email": "0x8890@airmail.cc",
    "url": "http://0x8890.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/0x8890/tapdance"
  },
  "scripts": {
    "test": "eslint . && node test | tap-dot"
  },
  "devDependencies": {
    "eslint": "^1.3.1",
    "eslint-config-0x8890": "^1.0.0",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.4.3",
    "tap-dot": "^1.0.0"
  },
  "eslintConfig": {
    "extends": "0x8890",
    "rules": {
      "strict": 0,
      "no-var": 0,
      "func-names": 0
    }
  },
  "files": [
    "index.js",
    "LICENSE"
  ],
  "engines": {
    "node": ">=4"
  },
  "keywords": [
    "tap",
    "test",
    "harness"
  ],
  "dependencies": {
    "deep-equal": "^1.0.1"
  },
  "readme": "# Tapdance\n\n[![Build Status](https://img.shields.io/travis/0x8890/tapdance/master.svg?style=flat-square)](https://travis-ci.org/0x8890/tapdance)\n[![npm Version](https://img.shields.io/npm/v/tapdance.svg?style=flat-square)](https://www.npmjs.com/package/tapdance)\n[![License](https://img.shields.io/npm/l/tapdance.svg?style=flat-square)](https://raw.githubusercontent.com/0x8890/tapdance/master/LICENSE)\n\nTest harness that emits [TAP](https://testanything.org).\n\n```\n$ npm install tapdance\n```\n\n\n## Usage\n\n```js\nconst t = require('tapdance')\n\nt.run(() => {\n  t.comment('test')\n  t.ok(true, 'trivial assert')\n  t.equal('apples', 'apples', 'the same value')\n  t.deepEqual({ foo: 'bar' }, { foo: 'bar' },\n    'deeply and strictly equal')\n})\n```\n\nWhen the test exits, Tapdance will return a `0` exit code if nothing went wrong, and a non-zero exit code otherwise. There is no need to manually call when a test ends.\n\n\n### t.ok(value, [message])\n\nCheck if a value is truthy or not.\n\n\n### t.equal(a, b, [message])\n\nCheck if two values are strictly equal or not.\n\n\n### t.deepEqual(a, b, [message])\n\nCheck if two values are deeply and strictly equal or not.\n\n\n### t.pass([fn], [message])\n\nCreate a passing message, optionally check if a function does **NOT** throw.\n\n\n### t.fail([fn], [message])\n\nCreate a failing message, optionally check if a function **SHOULD** throw.\n\n\n### t.comment([message])\n\nOutput a comment line.\n\n\n### t.run(fn)\n\nRun a function which may return a Promise. Calls to `run` get collected synchronously and run in sequential order in the next tick, which is useful when splitting up asynchronous tests in different files.\n\n\n### t.run.only(fn)\n\nSame as `run`, but exclude other calls to `run`.\n\n\n## License\n\nThis software is licensed under the [MIT License](//github.com/0x8890/tapdance/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/0x8890/tapdance/issues"
  },
  "_id": "tapdance@3.1.2",
  "_from": "tapdance@^3.0.9"
}
