{
  "name": "fortune",
  "description": "High-level I/O for web applications.",
  "version": "1.3.12",
  "license": "MIT",
  "author": {
    "email": "0x8890@airmail.cc",
    "url": "http://0x8890.com"
  },
  "homepage": "http://fortunejs.com",
  "repository": {
    "type": "git",
    "url": "git@github.com:fortunejs/fortune.git"
  },
  "bugs": {
    "url": "https://github.com/fortunejs/fortune/issues"
  },
  "scripts": {
    "clean": "rimraf dist/lib dist/test coverage",
    "coverage": "babel-node $(npm bin)/isparta cover --report html test",
    "deploy": "npm run publish",
    "deploy:website": "npm run build:website && ./website/deploy.sh",
    "build": "npm run build:lib && npm run build:test",
    "build:lib": "mkdirp dist/lib && babel lib --out-dir dist/lib",
    "build:test": "mkdirp dist/test && babel test --out-dir dist/test",
    "build:website": "babel-node website/build",
    "lint": "eslint lib test website",
    "prepublish": "npm run clean && npm run build",
    "postpublish": "npm run deploy:website",
    "test": "npm run lint && npm run test:server && npm run test:browser",
    "test:server": "npm run build && node dist/test | tap-dot",
    "test:browser": "browserify test/browser.js | tape-run -b firefox | tap-dot",
    "test:website": "npm run build:website && http-server -p 8890 dist/web"
  },
  "dependencies": {
    "array-buffer": "^1.0.2",
    "babel-runtime": "^5.8.24",
    "busboy": "^0.2.11",
    "chalk": "^1.1.1",
    "clone": "^1.0.2",
    "deep-equal": "^1.0.1",
    "error-class": "^1.1.0",
    "negotiator": "^0.5.3",
    "promise-compose": "^1.1.0",
    "tapdance": "^3.0.9",
    "ws": "^0.8.0"
  },
  "devDependencies": {
    "babel": "^5.8.23",
    "babelify": "^6.3.0",
    "browserify": "^11.1.0",
    "cssnext": "^1.8.4",
    "docchi": "^0.11.3",
    "eslint": "^1.4.3",
    "eslint-config-0x8890": "^1.0.0",
    "form-data": "^1.0.0-rc3",
    "highlight.js": "^8.8.0",
    "html-minifier": "^0.7.2",
    "http-server": "^0.8.0",
    "inflection": "^1.7.1",
    "isparta": "^3.0.4",
    "marked": "^0.3.5",
    "mkdirp": "^0.5.1",
    "mustache": "^2.1.3",
    "myth": "^1.5.0",
    "normalize.css": "^3.0.3",
    "rimraf": "^2.4.3",
    "tap-dot": "^1.0.0",
    "tape-run": "^1.1.0"
  },
  "files": [
    "dist/lib",
    "dist/test",
    "lib/",
    "test/",
    "LICENSE"
  ],
  "main": "dist/lib/index.js",
  "babel": {
    "ignore": [
      "test/adapter.js",
      "test/harness.js",
      "test/http.js"
    ],
    "nonStandard": false,
    "optional": [
      "runtime"
    ]
  },
  "browser": "dist/lib/browser.js",
  "browserify": {
    "transform": [
      "babelify"
    ]
  },
  "eslintConfig": {
    "extends": "0x8890"
  },
  "engines": {
    "node": ">=0.12"
  },
  "keywords": [
    "adapter",
    "api",
    "data",
    "http",
    "hypermedia",
    "rest",
    "serializer"
  ],
  "readme": "# [![Fortune.js](https://fortunejs.github.io/fortune/assets/fortune_logo.svg)](http://fortunejs.com)\n\n[![Build Status](https://img.shields.io/travis/fortunejs/fortune/master.svg?style=flat-square)](https://travis-ci.org/fortunejs/fortune)\n[![npm Version](https://img.shields.io/npm/v/fortune.svg?style=flat-square)](https://www.npmjs.com/package/fortune)\n[![License](https://img.shields.io/npm/l/fortune.svg?style=flat-square)](https://raw.githubusercontent.com/fortunejs/fortune/master/LICENSE)\n\nFortune is a high-level I/O library for web applications. It provides an implementation of [entity-relationship modelling](https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model), a data storage adapter and serialization interface, and hooks for application-specific logic. These parts working together can be used to power real-time ([WebSocket](http://fortunejs.com/api/#net-websocket)) and [hypermedia](https://en.wikipedia.org/wiki/Hypermedia) applications ([RMM Level 3](http://martinfowler.com/articles/richardsonMaturityModel.html)), including web pages and HTTP APIs.\n\n[View the website](http://fortunejs.com) for documentation. Get it from `npm`:\n\n```sh\n$ npm install fortune --save\n```\n\n\n## Example\n\nLet's model an API that models Twitter's basic functionality:\n\n```js\n// store.js\nconst fortune = require('fortune')\n\nmodule.exports = fortune.create()\n\n.defineType('user', {\n  name: { type: String },\n\n  // Following and followers are inversely related (many-to-many).\n  following: { link: 'user', inverse: 'followers', isArray: true },\n  followers: { link: 'user', inverse: 'following', isArray: true },\n\n  // Many-to-one relationship of user posts to post author.\n  posts: { link: 'post', inverse: 'author', isArray: true }\n})\n\n.defineType('post', {\n  message: { type: String },\n\n  // One-to-many relationship of post author to user posts.\n  author: { link: 'user', inverse: 'posts' }\n})\n```\n\nThen lets add a HTTP server:\n\n```js\n// server.js\nconst http = require('http')\nconst fortune = require('fortune')\nconst store = require('./store')\n\n// The `fortune.net.http` helper function returns a listener function which\n// does content negotiation, and maps the internal response to a HTTP response.\nconst server = http.createServer(fortune.net.http(store))\n\nstore.connect().then(() => server.listen(1337))\n```\n\n\nThis yields an *ad hoc* JSON-over-HTTP API. There are serializers for [Micro API](https://github.com/fortunejs/fortune-micro-api) (JSON-LD) and [JSON API](https://github.com/fortunejs/fortune-json-api).\n\nBy default, the data is persisted in memory. There are adapters for databases such as [MongoDB](https://github.com/fortunejs/fortune-mongodb), [Postgres](https://github.com/fortunejs/fortune-postgres), and [NeDB](https://github.com/fortunejs/fortune-nedb).\n\nSee the [plugins page](http://fortunejs.com/plugins/) for more details.\n\n\n## License\n\nThis software is licensed under the [MIT license](https://raw.githubusercontent.com/fortunejs/fortune/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "fortune@1.3.12",
  "_from": "fortune@"
}
