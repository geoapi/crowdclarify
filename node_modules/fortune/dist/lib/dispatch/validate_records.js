'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = validateRecords;

var _commonArray_proxy = require('../common/array_proxy');

var _commonErrors = require('../common/errors');

var _commonKeys = require('../common/keys');

/**
 * Do some validation on records to be created or updated to determine
 * if there are any records which have overlapping to-one relationships.
 *
 * @param {Object[]} records
 * @param {Object} fields
 * @param {Object} links
 * @return {Object[]}
 */

function validateRecords(records, fields, links) {
  var recordTypes = this.recordTypes;

  var toOneMap = {};

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(links), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var field = _step.value;

      var fieldLink = fields[field][_commonKeys.link];
      var fieldInverse = fields[field][_commonKeys.inverse];
      var inverseIsArray = recordTypes[fieldLink][fieldInverse][_commonKeys.isArray];

      if (!inverseIsArray) {
        toOneMap[field] = [];

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _getIterator(records), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var record = _step2.value;

            var value = record[field];
            var ids = Array.isArray(value) ? value : value ? [value] : [];

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = _getIterator(ids), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var id = _step3.value;

                if (!(0, _commonArray_proxy.includes)(toOneMap[field], id)) toOneMap[field].push(id);else throw new _commonErrors.BadRequestError('Multiple records can not have the ' + ('same to-one link value on the field "' + field + '".'));
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                  _iterator3['return']();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return records;
}

module.exports = exports['default'];