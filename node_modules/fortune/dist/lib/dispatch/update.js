'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _WeakMap = require('babel-runtime/core-js/weak-map')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Set = require('babel-runtime/core-js/set')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _clone = require('clone');

var _clone2 = _interopRequireDefault(_clone);

var _validate_records = require('./validate_records');

var _validate_records2 = _interopRequireDefault(_validate_records);

var _check_links = require('./check_links');

var _check_links2 = _interopRequireDefault(_check_links);

var _record_typeEnforce = require('../record_type/enforce');

var _record_typeEnforce2 = _interopRequireDefault(_record_typeEnforce);

var _commonApply_update = require('../common/apply_update');

var _commonApply_update2 = _interopRequireDefault(_commonApply_update);

var _commonChange = require('../common/change');

var _commonChange2 = _interopRequireDefault(_commonChange);

var _commonMethods = require('../common/methods');

var _commonKeys = require('../common/keys');

var _commonErrors = require('../common/errors');

var _commonArray_proxy = require('../common/array_proxy');

var _commonDeep_equal_options = require('../common/deep_equal_options');

var _commonDeep_equal_options2 = _interopRequireDefault(_commonDeep_equal_options);

/**
 * Do updates. First, it must find the records to update, then run transforms
 * and validation, then apply the update as well as links on related records.
 *
 * @return {Promise}
 */

exports['default'] = function (context) {
  var _this = this;

  var adapter = this.adapter;
  var serializer = this.serializer;
  var recordTypes = this.recordTypes;
  var transforms = this.transforms;

  // Keyed by update, valued by record.
  var updateMap = new _WeakMap();

  // Keyed by update, valued by hash of linked records.
  var linkedMap = new _WeakMap();

  var relatedUpdates = {};
  var transformedUpdates = [];

  var transaction = undefined;
  var updates = undefined;
  var type = undefined;
  var meta = undefined;
  var fields = undefined;
  var transform = undefined;
  var links = undefined;

  return serializer.parseUpdate(context).then(function (results) {
    updates = results;

    validateUpdates(updates);var _context$request = context.request;
    type = _context$request.type;
    meta = _context$request.meta;

    fields = recordTypes[type];
    transform = transforms[type];
    links = _Object$keys(fields).filter(function (field) {
      return fields[field][_commonKeys.link];
    });

    // Delete denormalized inverse fields, can't be updated.
    for (var field in fields) {
      if (fields[field][_commonKeys.denormalizedInverse]) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(updates), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var update = _step.value;

            if ('replace' in update) delete update.replace[field];
            if ('push' in update) delete update.push[field];
            if ('pull' in update) delete update.pull[field];
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }return adapter.find(type, updates.map(function (update) {
      return update.id;
    }), null, meta);
  }).then(function (records) {
    return _Promise.all(records.map(function (record) {
      var update = (0, _commonArray_proxy.find)(updates, function (update) {
        return update.id === record[_commonKeys.primary];
      });

      if (!update) throw new _commonErrors.NotFoundError('The record to be updated could not be found.');

      var cloneUpdate = (0, _clone2['default'])(update);

      return _Promise.resolve(transform && transform.input ? transform.input(context, (0, _clone2['default'])(record), update) : update).then(function (update) {
        if (!(0, _deepEqual2['default'])(update, cloneUpdate, _commonDeep_equal_options2['default'])) Object.defineProperty(context.response, 'updateModified', { value: true });

        transformedUpdates.push(update);
        updateMap.set(update, record);

        // Clone the record (again).
        record = (0, _clone2['default'])(record);

        // Apply updates to record.
        (0, _commonApply_update2['default'])(record, update);

        // Apply operators to record.
        if ('operate' in update) record = adapter.applyOperators(record, update.operate);

        // Enforce the fields.
        (0, _record_typeEnforce2['default'])(type, record, fields);

        // Ensure referential integrity.
        return _check_links2['default'].call(_this, record, fields, links, meta).then(function (linked) {
          linkedMap.set(update, linked);
          return record;
        });
      });
    }));
  }).then(function (records) {
    return _validate_records2['default'].call(_this, records, fields, links);
  }).then(function (records) {
    Object.defineProperty(context.response, 'records', {
      configurable: true,
      value: records
    });

    return adapter.beginTransaction();
  }).then(function (t) {
    transaction = t;

    // Drop fields in the updates that aren't defined in the record type
    // before doing the update.
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _getIterator(transformedUpdates), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var update = _step2.value;

        dropFields(update, fields);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return transaction.update(type, transformedUpdates, meta);
  }).then(function () {
    // Build up related updates based on update objects.
    var idCache = {};

    // Iterate over each update to generate related updates.
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = _getIterator(transformedUpdates), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var update = _step3.value;
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _getIterator(links), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var field = _step4.value;

            var inverseField = fields[field][_commonKeys.inverse];

            if (!inverseField) continue;

            var isArray = fields[field][_commonKeys.isArray];
            var linkedType = fields[field][_commonKeys.link];
            var linkedIsArray = recordTypes[linkedType][inverseField][_commonKeys.isArray];

            // Do some initialization.
            if (!(linkedType in relatedUpdates)) relatedUpdates[linkedType] = [];
            if (!(linkedType in idCache)) idCache[linkedType] = new _Set();

            var record = updateMap.get(update);
            var linked = linkedMap.get(update);

            // Replacing a link field is pretty complicated.
            if (update.replace && field in update.replace) {
              var id = update.replace[field];

              if (!Array.isArray(id)) {
                // Set related field.
                if (id !== null) addId(update.id, getUpdate(linkedType, id, relatedUpdates, idCache), inverseField, linkedIsArray);

                // Unset 2nd degree related record.
                if (linked[field] && linked[field][inverseField] !== null && !linkedIsArray && linked[field][inverseField] !== update.id) removeId(id, getUpdate(linkedType, linked[field][inverseField], relatedUpdates, idCache), inverseField, linkedIsArray);

                // For unsetting, remove ID from related record.
                if (record[field] !== null && record[field] !== update[field] && record[field] !== id) removeId(update.id, getUpdate(linkedType, record[field], relatedUpdates, idCache), inverseField, linkedIsArray);

                // After this point, there's no need to go over push/pull.
                continue;
              }

              var ids = id;

              // Initialize array.
              if (!update.push) update.push = {};
              if (!update.pull) update.pull = {};
              update.push[field] = [];
              update.pull[field] = [];

              // Compute differences, and mutate the update.
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = _getIterator(ids), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var _id = _step5.value;

                  if (!(0, _commonArray_proxy.includes)(record[field], _id)) update.push[field].push(_id);
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5['return']) {
                    _iterator5['return']();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              var _iteratorNormalCompletion6 = true;
              var _didIteratorError6 = false;
              var _iteratorError6 = undefined;

              try {
                for (var _iterator6 = _getIterator(record[field]), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                  var _id2 = _step6.value;

                  if (!(0, _commonArray_proxy.includes)(ids, _id2)) update.pull[field].push(_id2);
                }
              } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion6 && _iterator6['return']) {
                    _iterator6['return']();
                  }
                } finally {
                  if (_didIteratorError6) {
                    throw _iteratorError6;
                  }
                }
              }
            }

            if (update.push && field in update.push) {
              var push = Array.isArray(update.push[field]) ? update.push[field] : [update.push[field]];

              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = undefined;

              try {
                for (var _iterator7 = _getIterator(push), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var id = _step7.value;

                  if (id !== null) addId(update.id, getUpdate(linkedType, id, relatedUpdates, idCache), inverseField, linkedIsArray);
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7['return']) {
                    _iterator7['return']();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }
            }

            if (update.pull && field in update.pull) {
              var pull = Array.isArray(update.pull[field]) ? update.pull[field] : [update.pull[field]];

              var _iteratorNormalCompletion8 = true;
              var _didIteratorError8 = false;
              var _iteratorError8 = undefined;

              try {
                for (var _iterator8 = _getIterator(pull), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                  var id = _step8.value;

                  if (id !== null) removeId(update.id, getUpdate(linkedType, id, relatedUpdates, idCache), inverseField, linkedIsArray);
                }
              } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion8 && _iterator8['return']) {
                    _iterator8['return']();
                  }
                } finally {
                  if (_didIteratorError8) {
                    throw _iteratorError8;
                  }
                }
              }
            }

            // Unset from 2nd degree related records.
            if (linked[field] && !linkedIsArray) {
              var partialRecords = Array.isArray(linked[field]) ? linked[field] : [linked[field]];

              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = undefined;

              try {
                for (var _iterator9 = _getIterator(partialRecords), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var partialRecord = _step9.value;

                  if (partialRecord[inverseField] === update.id) continue;

                  removeId(partialRecord.id, getUpdate(type, partialRecord[inverseField], relatedUpdates, idCache), field, isArray);
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9['return']) {
                    _iterator9['return']();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return _Promise.all(_Object$keys(relatedUpdates).map(function (type) {
      return relatedUpdates[type].length ? transaction.update(type, relatedUpdates[type], meta) : null;
    }));
  }).then(function () {
    return transaction.endTransaction();
  })['catch'](function (error) {
    if (transaction) transaction.endTransaction(error);
    throw error;
  }).then(function () {
    var mapId = function mapId(update) {
      return update.id;
    };

    var eventData = _defineProperty({}, _commonMethods.update, _defineProperty({}, type, transformedUpdates.map(function (update) {
      return update.id;
    })));

    for (var linkedType in relatedUpdates) {
      if (!relatedUpdates[linkedType].length) continue;
      if (linkedType !== type) eventData[_commonMethods.update][linkedType] = relatedUpdates[linkedType].map(mapId);

      // Get the union of update IDs.
      else eventData[_commonMethods.update][type] = [].concat(_toConsumableArray(union(eventData[_commonMethods.update][type], relatedUpdates[type].map(mapId))));
    }

    // Summarize changes during the lifecycle of the request.
    _this.emit(_commonChange2['default'], eventData);

    return context;
  });
};

// Get the union of arrays with unique values by means of the Set type.
function union() {
  return new _Set(Array.prototype.reduce.call(arguments, function (memo, array) {
    memo.push.apply(memo, _toConsumableArray(array));
    return memo;
  }, []));
}

// Validate updates.
function validateUpdates(updates) {
  if (!updates || !updates.length) throw new _commonErrors.BadRequestError('There are no valid updates in the request.');

  var _iteratorNormalCompletion10 = true;
  var _didIteratorError10 = false;
  var _iteratorError10 = undefined;

  try {
    for (var _iterator10 = _getIterator(updates), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
      var update = _step10.value;

      if (!(_commonKeys.primary in update)) throw new _commonErrors.BadRequestError('The required field "' + _commonKeys.primary + '" on the update is missing.');
    }
  } catch (err) {
    _didIteratorError10 = true;
    _iteratorError10 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion10 && _iterator10['return']) {
        _iterator10['return']();
      }
    } finally {
      if (_didIteratorError10) {
        throw _iteratorError10;
      }
    }
  }
}

function dropFields(update, fields) {
  for (var field in update.replace) {
    if (!(field in fields)) delete update.replace[field];
  }for (var field in update.push) {
    if (!(field in fields)) delete update.push[field];
  }for (var field in update.pull) {
    if (!(field in fields)) delete update.pull[field];
  }
}

// Get a related update object by ID, or return a new one if not found.
function getUpdate(type, id, updates, cache) {
  if ('type' in cache && cache[type].has(id)) return (0, _commonArray_proxy.find)(updates[type], function (update) {
    return update[_commonKeys.primary] === id;
  });

  var update = { id: id };
  updates[type].push(update);
  cache[type].add(id);
  return update;
}

// Add an ID to an update object.
function addId(id, update, field, isArray) {
  if (isArray) {
    if (!update.push) update.push = {};
    if (!update.push[field]) update.push[field] = [];
    update.push[field].push(id);
    return;
  }

  if (!update.replace) update.replace = {};
  update.replace[field] = id;
}

// Remove an ID from an update object.
function removeId(id, update, field, isArray) {
  if (isArray) {
    if (!update.pull) update.pull = {};
    if (!update.pull[field]) update.pull[field] = [];
    update.pull[field].push(id);
    return;
  }

  if (!update.replace) update.replace = {};
  update.replace[field] = null;
}
module.exports = exports['default'];