/**
 * Apply `output` transform per record, then run the serializer.
 * This mutates `context.response`.
 *
 * @return {Promise}
 */
"use strict";

var _Promise = require("babel-runtime/core-js/promise")["default"];

var _Object$keys = require("babel-runtime/core-js/object/keys")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = function (context) {
  var serializer = this.serializer;
  var transforms = this.transforms;
  var request = context.request;
  var response = context.response;
  var type = request.type;

  var transform = transforms[type];
  var records = response.records;
  var include = response.include;

  // Delete temporary keys.
  delete response.records;
  delete response.include;

  // Run transforms on primary type.
  return (records ? _Promise.all(records.map(function (record) {
    return _Promise.resolve(transform && transform.output ? transform.output(context, record) : record);
  })).then(function (updatedRecords) {
    for (var i = 0; i < updatedRecords.length; i++) {
      records[i] = updatedRecords[i];
    }if (!include) return null;

    // The order of the keys and their corresponding indices matter. Since it
    // is an associative array, we are not guaranteed any particular order,
    // but the order that we get matters.
    var includeTypes = _Object$keys(include);

    // Run output transforms per include type.
    return _Promise.all(includeTypes.map(function (includeType) {
      return _Promise.all(include[includeType].map(function (record) {
        return _Promise.resolve(transforms[includeType] && transforms[includeType].output ? transforms[includeType].output(context, record) : record);
      }));
    })).then(function (types) {
      return types.reduce(function (include, records, index) {
        include[includeTypes[index]] = records;
        return include;
      }, {});
    });
  }) : _Promise.resolve()).then(function (include) {
    var args = [context];

    if (records) args.push(records);
    if (include) args.push(include);

    return serializer.showResponse.apply(serializer, args);
  });
};

module.exports = exports["default"];