'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = ensureTypes;

var _commonKeys = require('../common/keys');

// Generate denormalized inverse field name.
var denormalizedPrefix = '__';
var denormalizedDelimiter = '_';
var denormalizedPostfix = '_inverse';

/**
 * Do static analysis on the `recordTypes` object to see if `link` and
 * `inverse` values are valid. Also assign denormalized inverse fields.
 *
 * @param {Object} recordTypes
 */

function ensureTypes(recordTypes) {
  for (var type in recordTypes) {
    var fields = recordTypes[type];

    for (var field in fields) {
      var _value;

      var definition = fields[field];

      if (!(_commonKeys.link in definition)) continue;

      if (!(definition[_commonKeys.link] in recordTypes)) throw new Error('The value for "' + _commonKeys.link + '" on "' + field + '" is ' + 'invalid, the record type does not exist.');

      var linkedFields = recordTypes[definition[_commonKeys.link]];

      if (_commonKeys.inverse in definition) {
        if (!(definition[_commonKeys.inverse] in linkedFields)) throw new Error('The value for "' + _commonKeys.inverse + '" on "' + field + '" ' + 'is invalid, the field does not exist.');

        if (linkedFields[definition[_commonKeys.inverse]][_commonKeys.inverse] !== field) throw new Error('The value for "' + _commonKeys.inverse + '" on "' + field + '" ' + 'is invalid, the inversely related field must define its ' + ('inverse as "' + field + '".'));

        if (linkedFields[definition[_commonKeys.inverse]][_commonKeys.link] !== type) throw new Error('The value for "' + _commonKeys.link + '" on "' + field + '" ' + 'is invalid, the inversely related field must define its ' + ('link as "' + type + '".'));

        continue;
      }

      // Need to assign denormalized inverse. The denormalized inverse field
      // is basically an automatically assigned inverse field that should
      // not be visible to the client, but exists in the data store.
      var denormalizedField = '' + denormalizedPrefix + type + ('' + denormalizedDelimiter + field + denormalizedPostfix);

      _Object$defineProperty(definition, _commonKeys.inverse, {
        value: denormalizedField
      });

      _Object$defineProperty(linkedFields, denormalizedField, {
        value: (_value = {}, _defineProperty(_value, _commonKeys.link, type), _defineProperty(_value, _commonKeys.inverse, field), _defineProperty(_value, _commonKeys.isArray, true), _defineProperty(_value, _commonKeys.denormalizedInverse, true), _value)
      });
    }
  }
}

module.exports = exports['default'];