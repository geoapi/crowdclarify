'use strict';

var _Set = require('babel-runtime/core-js/set')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = validate;

var _commonKeys = require('../common/keys');

var nativeTypes = new _Set([String, Number, Boolean, Date, Object, Buffer]);

/**
 * Given a hash of field definitions, validate that the definitions are in the
 * correct format.
 *
 * @param {Object} fields
 * @return {Object}
 */

function validate() {
  var fields = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  for (var key in fields) {
    validateField(fields[key], key);
  }return fields;
}

/**
 * Parse a field definition.
 *
 * @param {Object} value
 * @param {String} key
 */
function validateField(value, key) {
  if (typeof value !== 'object' || value.constructor !== Object) throw new TypeError('The definition of "' + key + '" must be an object.');

  if (key === _commonKeys.primary) throw new Error('Can not define primary key.');

  if (!(_commonKeys.type in value) && !(_commonKeys.link in value)) throw new Error('The definition of "' + key + '" must contain either the ' + ('"' + _commonKeys.type + '" or "' + _commonKeys.link + '" property.'));

  if (_commonKeys.type in value && _commonKeys.link in value) throw new Error('Can not define both "' + _commonKeys.type + '" and "' + _commonKeys.link + '" ' + ('on "' + key + '".'));

  if (_commonKeys.type in value) {
    if (!nativeTypes.has(value[_commonKeys.type]) && typeof value[_commonKeys.type] !== 'symbol') throw new Error('The "' + _commonKeys.type + '" on "' + key + '" is invalid.');

    if (_commonKeys.inverse in value) throw new Error('The field "' + _commonKeys.inverse + '" may not be defined ' + ('on "' + key + '."'));
  }

  if (_commonKeys.link in value) {
    if (typeof value[_commonKeys.link] !== 'string') throw new TypeError('The "' + _commonKeys.link + '" on "' + key + '" must be a string.');

    if (_commonKeys.inverse in value && typeof value[_commonKeys.inverse] !== 'string') throw new TypeError('The "' + _commonKeys.inverse + '" on "' + key + '" ' + 'must be a string.');
  }

  if (_commonKeys.isArray in value && typeof value[_commonKeys.isArray] !== 'boolean') throw new TypeError('The key "' + _commonKeys.isArray + '" on "' + key + '" ' + 'must be a boolean.');
}
module.exports = exports['default'];