'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _ = require('./');

var _2 = _interopRequireDefault(_);

var _commonKeys = require('../common/keys');

var keys = _interopRequireWildcard(_commonKeys);

var _commonErrors = require('../common/errors');

var errors = _interopRequireWildcard(_commonErrors);

/**
 * A singleton for the adapter. For internal use.
 */

var AdapterSingleton = (function (_Adapter) {
  _inherits(AdapterSingleton, _Adapter);

  function AdapterSingleton(dependencies) {
    _classCallCheck(this, AdapterSingleton);

    _get(Object.getPrototypeOf(AdapterSingleton.prototype), 'constructor', this).call(this);

    var recordTypes = dependencies.recordTypes;
    var type = dependencies.adapter.type;

    if (typeof type !== 'function') throw new TypeError('The adapter must be a function or class.');

    var CustomAdapter = _2['default'].prototype.isPrototypeOf(type.prototype) ? type : type(_2['default']);

    if (!_2['default'].prototype.isPrototypeOf(CustomAdapter.prototype)) throw new TypeError('The adapter must be a class that extends ' + 'Adapter.');

    return new CustomAdapter({
      options: dependencies.adapter.options || {},
      keys: keys, errors: errors, recordTypes: recordTypes
    });
  }

  return AdapterSingleton;
})(_2['default']);

exports['default'] = AdapterSingleton;
module.exports = exports['default'];