'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _WeakMap = require('babel-runtime/core-js/weak-map')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.applyOptions = applyOptions;
exports.generateId = generateId;

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _arrayBuffer = require('array-buffer');

var _commonKeys = require('../../common/keys');

var _commonErrors = require('../../common/errors');

var _commonDeep_equal_options = require('../../common/deep_equal_options');

var _commonDeep_equal_options2 = _interopRequireDefault(_commonDeep_equal_options);

function applyOptions(count, fields, records, options) {
  if (!options) options = {};

  if ('match' in options) {
    records = records.filter(matchByField.bind(null, fields, options.match));
    count = records.length;
  }

  if ('fields' in options) {
    var isInclude = _Object$keys(options.fields).every(function (field) {
      return options.fields[field];
    });
    var isExclude = _Object$keys(options.fields).every(function (field) {
      return !options.fields[field];
    });

    if (!(isInclude || isExclude)) throw new _commonErrors.BadRequestError('Fields format is invalid.');

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(records), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var record = _step.value;

        for (var field in record) {
          if (field === _commonKeys.primary) continue;
          if (isInclude && !(field in options.fields) || isExclude && field in options.fields) delete record[field];
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  if ('sort' in options) records = records.sort(compare.bind(null, fields, options.sort));

  if ('limit' in options || 'offset' in options) records = records.slice(options.offset, options.offset && options.limit ? options.offset + options.limit : options.limit);

  records.count = count;

  return records;
}

var matchCheck = new _WeakMap([[Date, function (a, b) {
  return a.getTime() === b.getTime();
}], [Buffer, function (a, b) {
  return a.equals((0, _arrayBuffer.toBuffer)(b));
}], [Object, function (a, b) {
  return (0, _deepEqual2['default'])(a, b, _commonDeep_equal_options2['default']);
}]]);

function check(type, a, b) {
  if (b === null) return a === null;
  var matcher = matchCheck.get(type);
  return matcher ? matcher(a, b) : a === b;
}

function matchByField(fields, match, record) {
  var checkValue = function checkValue(fieldDefinition, a, b) {
    return fieldDefinition[_commonKeys.isArray] ? a.some(check.bind(null, fieldDefinition[_commonKeys.type], b)) : check(fieldDefinition[_commonKeys.type], b, a);
  };

  for (var field in match) {
    var matches = match[field];
    if (!Array.isArray(match[field])) matches = [matches];
    if (!matches.some(checkValue.bind(null, fields[field], record[field]))) return false;
  }

  return true;
}

// For comparing sort order.
var comparisons = new _WeakMap([[Number, function (a, b) {
  return a - b;
}], [String, function (a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}], [Boolean, function (a, b) {
  return a === b ? 0 : a ? 1 : -1;
}], [Date, function (a, b) {
  return a.getTime() - b.getTime();
}], [Buffer, Buffer.compare],

// There is no comparison here that makes sense.
[Object, function (a, b) {
  return JSON.stringify(a).length - JSON.stringify(b).length;
}]]);

function compare(fields, sort, x, y) {
  for (var field in sort) {
    var a = x[field];
    var b = y[field];
    var isAscending = sort[field];
    var fieldDefinition = fields[field];
    var fieldIsArray = fieldDefinition[_commonKeys.isArray];
    var fieldType = fieldDefinition[_commonKeys.type];

    if (a === null) return isAscending ? -1 : 1;
    if (b === null) return isAscending ? 1 : -1;

    var result = 0;

    if (fieldIsArray) result = a.length - b.length;else if (fieldType) result = comparisons.get(fieldType)(a, b);

    if (result === 0) continue;

    return isAscending ? result : -result;
  }

  return 0;
}

// Browser-safe ID generation.

function generateId() {
  return ('00000000' + Math.floor(Math.random() * Math.pow(2, 32)).toString(16)).slice(-8);
}