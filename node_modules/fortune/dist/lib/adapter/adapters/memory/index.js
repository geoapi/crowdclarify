'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _common = require('../common');

var _commonApply_update = require('../../../common/apply_update');

var _commonApply_update2 = _interopRequireDefault(_commonApply_update);

var _helpers = require('./helpers');

/**
 * Memory adapter.
 */

exports['default'] = function (Adapter) {
  return (function (_Adapter) {
    _inherits(MemoryAdapter, _Adapter);

    function MemoryAdapter() {
      _classCallCheck(this, MemoryAdapter);

      _get(Object.getPrototypeOf(MemoryAdapter.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(MemoryAdapter, [{
      key: 'connect',
      value: function connect() {
        this.db = {};

        var recordTypes = this.recordTypes;

        for (var type in recordTypes) {
          this.db[type] = {};
        }return _Promise.resolve();
      }
    }, {
      key: 'disconnect',
      value: function disconnect() {
        delete this.db;
        return _Promise.resolve();
      }
    }, {
      key: 'find',
      value: function find(type, ids, options) {
        if (ids && !ids.length) return _get(Object.getPrototypeOf(MemoryAdapter.prototype), 'find', this).call(this);

        var db = this.db;
        var recordTypes = this.recordTypes;

        var fields = recordTypes[type];
        var collection = db[type];
        var records = [];
        var count = 0;

        if (ids) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = _getIterator(ids), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var id = _step.value;

              var record = collection[id];
              if (record) {
                count++;
                records.push(_helpers.outputRecord.call(this, type, record));
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else for (var id in collection) {
          count++;
          records.push(_helpers.outputRecord.call(this, type, collection[id]));
        }

        return _Promise.resolve((0, _common.applyOptions)(count, fields, records, options));
      }
    }, {
      key: 'create',
      value: function create(type, records) {
        records = records.map(_helpers.inputRecord.bind(this, type));

        var db = this.db;
        var primaryKey = this.keys.primary;
        var ConflictError = this.errors.ConflictError;

        var collection = db[type];

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _getIterator(records), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var record = _step2.value;

            var id = record[primaryKey];

            if (id in collection) return _Promise.reject(new ConflictError('Record with ID "' + id + '" already exists.'));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = _getIterator(records), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var record = _step3.value;
            collection[record[primaryKey]] = record;
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return _Promise.resolve(records.map(_helpers.outputRecord.bind(this, type)));
      }
    }, {
      key: 'update',
      value: function update(type, updates) {
        if (!updates.length) return _get(Object.getPrototypeOf(MemoryAdapter.prototype), 'update', this).call(this);

        var db = this.db;
        var primaryKey = this.keys.primary;

        var collection = db[type];
        var count = 0;

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _getIterator(updates), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var update = _step4.value;

            var id = update[primaryKey];
            var record = collection[id];

            if (!record) continue;

            count++;
            record = _helpers.outputRecord.call(this, type, record);

            (0, _commonApply_update2['default'])(record, update);

            collection[id] = _helpers.inputRecord.call(this, type, record);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return _Promise.resolve(count);
      }
    }, {
      key: 'delete',
      value: function _delete(type, ids) {
        if (ids && !ids.length) return _get(Object.getPrototypeOf(MemoryAdapter.prototype), 'delete', this).call(this);

        var db = this.db;

        var collection = db[type];
        var count = 0;

        if (ids) {
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = _getIterator(ids), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var id = _step5.value;

              if (id in collection) {
                count++;
                delete collection[id];
              }
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5['return']) {
                _iterator5['return']();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }
        } else for (var id in collection) {
          count++;
          delete collection[id];
        }

        return _Promise.resolve(count);
      }
    }]);

    return MemoryAdapter;
  })(Adapter);
};

module.exports = exports['default'];