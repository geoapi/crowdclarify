'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.inputRecord = inputRecord;
exports.outputRecord = outputRecord;

var _clone = require('clone');

var _clone2 = _interopRequireDefault(_clone);

var _common = require('../common');

function inputRecord(type, record) {
  var recordTypes = this.recordTypes;
  var _keys = this.keys;
  var primaryKey = _keys.primary;
  var isArrayKey = _keys.isArray;

  var result = {};
  var fields = recordTypes[type];

  // ID business.
  result[primaryKey] = primaryKey in record ? record[primaryKey] : (0, _common.generateId)();

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_Object$getOwnPropertyNames(fields)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var field = _step.value;

      if (!(field in record)) {
        result[field] = fields[field][isArrayKey] ? [] : null;
        continue;
      }

      result[field] = (0, _clone2['default'])(record[field]);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

function outputRecord(type, record) {
  var recordTypes = this.recordTypes;
  var _keys2 = this.keys;
  var primaryKey = _keys2.primary;
  var isArrayKey = _keys2.isArray;
  var denormalizedInverseKey = _keys2.denormalizedInverse;

  var result = {};
  var fields = recordTypes[type];

  // ID business.
  result[primaryKey] = record[primaryKey];

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(_Object$getOwnPropertyNames(fields)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var field = _step2.value;

      var value = field in record ? (0, _clone2['default'])(record[field]) : fields[field][isArrayKey] ? [] : null;

      // Do not enumerate denormalized fields.
      if (fields[field][denormalizedInverseKey]) {
        _Object$defineProperty(result, field, {
          configurable: true, writable: true, value: value
        });
        continue;
      }

      if (field in record) result[field] = value;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
}