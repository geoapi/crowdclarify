'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.inputRecord = inputRecord;
exports.outputRecord = outputRecord;

var _clone = require('clone');

var _clone2 = _interopRequireDefault(_clone);

var _common = require('../common');

var delimiter = '__';

exports.delimiter = delimiter;
var bufferEncoding = 'base64';

function inputRecord(type, record) {
  var recordTypes = this.recordTypes;
  var _keys = this.keys;
  var primaryKey = _keys.primary;
  var typeKey = _keys.type;
  var isArrayKey = _keys.isArray;

  var result = {};
  var fields = recordTypes[type];

  // ID business.
  result[primaryKey] = primaryKey in record ? record[primaryKey] : (0, _common.generateId)();

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_Object$getOwnPropertyNames(fields)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var field = _step.value;

      var fieldType = fields[field][typeKey];
      var fieldIsArray = fields[field][isArrayKey];

      if (!(field in record)) {
        result[field] = fieldIsArray ? [] : null;
        continue;
      }

      var value = (0, _clone2['default'])(record[field]);

      // Cast Buffer to String.
      if (fieldType === Buffer && value) {
        result[field] = fieldIsArray ? value.map(toString) : toString(value);
        continue;
      }

      result[field] = value;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

function outputRecord(type, record) {
  var recordTypes = this.recordTypes;
  var _keys2 = this.keys;
  var primaryKey = _keys2.primary;
  var typeKey = _keys2.type;
  var isArrayKey = _keys2.isArray;
  var denormalizedInverseKey = _keys2.denormalizedInverse;

  var result = {};
  var fields = recordTypes[type];

  // ID business.
  result[primaryKey] = record[primaryKey];

  for (var field in record) {
    if (!(field in fields)) continue;

    var value = (0, _clone2['default'])(record[field]);
    var fieldType = fields[field][typeKey];
    var fieldIsArray = fields[field][isArrayKey];
    var fieldIsDenormalized = fields[field][denormalizedInverseKey];

    // Cast String to Buffer.
    if (fieldType === Buffer && record[field]) {
      result[field] = fieldIsArray ? value.map(toBuffer) : toBuffer(value);
      continue;
    }

    // Cast String to Date.
    if (fieldType === Date && record[field]) {
      result[field] = fieldIsArray ? value.map(toDate) : toDate(value);
      continue;
    }

    // Do not enumerate denormalized fields.
    if (fieldIsDenormalized) {
      _Object$defineProperty(result, field, {
        configurable: true, writable: true, value: value
      });
      continue;
    }

    result[field] = value;
  }

  return result;
}

function toString(buffer) {
  return buffer.toString(bufferEncoding);
}

function toBuffer(string) {
  return new Buffer(string, bufferEncoding);
}

function toDate(string) {
  return new Date(Date.parse(string));
}