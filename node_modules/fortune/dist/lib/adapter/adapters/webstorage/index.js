'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _common = require('../common');

var _commonApply_update = require('../../../common/apply_update');

var _commonApply_update2 = _interopRequireDefault(_commonApply_update);

var _commonGlobal_object = require('../../../common/global_object');

var _commonGlobal_object2 = _interopRequireDefault(_commonGlobal_object);

var _helpers = require('./helpers');

/**
 * Web Storage adapter. Available options:
 *
 * - `prefix`: Prefix for key names. Default: `fortune`.
 * - `storage`: name of storage global. Default: `localStorage`.
 */

exports['default'] = function (Adapter) {
  return (function (_Adapter) {
    _inherits(WebStorageAdapter, _Adapter);

    function WebStorageAdapter() {
      _classCallCheck(this, WebStorageAdapter);

      _get(Object.getPrototypeOf(WebStorageAdapter.prototype), 'constructor', this).apply(this, arguments);

      var _options = this.options;
      var storage = _options.storage;
      var prefix = _options.prefix;

      if (!prefix) this.options.prefix = 'fortune';
      if (!storage) this.options.storage = 'localStorage';

      this.store = (0, _commonGlobal_object2['default'])()[this.options.storage];
    }

    _createClass(WebStorageAdapter, [{
      key: 'create',
      value: function create(type, records) {
        records = records.map(_helpers.inputRecord.bind(this, type));

        var store = this.store;
        var primaryKey = this.keys.primary;
        var ConflictError = this.errors.ConflictError;
        var prefix = this.options.prefix;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {

          for (var _iterator = _getIterator(records), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var record = _step.value;

            var key = prefix + _helpers.delimiter + type + _helpers.delimiter + record[primaryKey];

            if (store.getItem(key) !== null) return _Promise.reject(new ConflictError('Record with ID "' + record[primaryKey] + '" already exists.'));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _getIterator(records), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var record = _step2.value;

            var key = prefix + _helpers.delimiter + type + _helpers.delimiter + record[primaryKey];

            store.setItem(key, JSON.stringify(record));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return _Promise.resolve(records.map(_helpers.outputRecord.bind(this, type)));
      }
    }, {
      key: 'find',
      value: function find(type, ids, options) {
        if (ids && !ids.length) return _get(Object.getPrototypeOf(WebStorageAdapter.prototype), 'find', this).call(this);

        var store = this.store;
        var recordTypes = this.recordTypes;
        var prefix = this.options.prefix;

        var fields = recordTypes[type];
        var records = [];
        var count = 0;

        if (ids) {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = _getIterator(ids), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var id = _step3.value;

              var key = prefix + _helpers.delimiter + type + _helpers.delimiter + id;
              var record = store.getItem(key);
              if (record) {
                count++;
                records.push(_helpers.outputRecord.call(this, type, JSON.parse(record)));
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                _iterator3['return']();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        } else for (var i = 0; i < store.length; i++) {
          var key = store.key(i);
          var parts = key.split(_helpers.delimiter);

          if (parts[0] !== prefix) continue;
          if (parts[1] !== type) continue;

          var record = store.getItem(key);
          if (record === null) continue;

          count++;
          records.push(_helpers.outputRecord.call(this, type, JSON.parse(record)));
        }

        return _Promise.resolve((0, _common.applyOptions)(count, fields, records, options));
      }
    }, {
      key: 'update',
      value: function update(type, updates) {
        if (!updates.length) return _get(Object.getPrototypeOf(WebStorageAdapter.prototype), 'update', this).call(this);

        var store = this.store;
        var primaryKey = this.keys.primary;
        var prefix = this.options.prefix;

        var count = 0;

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _getIterator(updates), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var update = _step4.value;

            var key = prefix + _helpers.delimiter + type + _helpers.delimiter + update[primaryKey];
            var record = store.getItem(key);

            if (record === null) continue;

            count++;
            record = _helpers.outputRecord.call(this, type, JSON.parse(record));

            (0, _commonApply_update2['default'])(record, update);

            store.setItem(key, JSON.stringify(_helpers.inputRecord.call(this, type, record)));
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return _Promise.resolve(count);
      }
    }, {
      key: 'delete',
      value: function _delete(type, ids) {
        if (ids && !ids.length) return _get(Object.getPrototypeOf(WebStorageAdapter.prototype), 'delete', this).call(this);

        var store = this.store;
        var prefix = this.options.prefix;

        var count = 0;

        if (ids) {
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = _getIterator(ids), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var id = _step5.value;

              var key = prefix + _helpers.delimiter + type + _helpers.delimiter + id;

              if (store.getItem(key) !== null) {
                count++;
                store.removeItem(key);
              }
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5['return']) {
                _iterator5['return']();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }
        } else for (var i = 0; i < store.length; i++) {
          var key = store.key(i);
          var parts = key.split(_helpers.delimiter);

          if (parts[0] !== prefix) continue;
          if (parts[1] !== type) continue;
          if (store.getItem(key) === null) continue;

          count++;
          store.removeItem(key);
        }

        return _Promise.resolve(count);
      }
    }]);

    return WebStorageAdapter;
  })(Adapter);
};

module.exports = exports['default'];