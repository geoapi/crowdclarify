/**
 * Define non-writable, non-configurable, enumerable properties on the first
 * object given an arbitrary number of objects.
 *
 * @param {...Object}
 * @return {Object}
 */
"use strict";

var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

var _Object$defineProperties = require("babel-runtime/core-js/object/define-properties")["default"];

var _Object$keys = require("babel-runtime/core-js/object/keys")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = defineArguments;

function defineArguments() {
  var target = arguments[0];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(Array.prototype.slice.call(arguments, 1)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var argument = _step.value;

      _Object$defineProperties(target, _Object$keys(argument).reduce(setProperty.bind(argument), {}));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"]) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return target;
}

function setProperty(hash, key) {
  hash[key] = {
    value: this[key],
    enumerable: true
  };

  return hash;
}
module.exports = exports["default"];