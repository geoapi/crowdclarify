'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _clone = require('clone');

var _clone2 = _interopRequireDefault(_clone);

var _ = require('./');

var _2 = _interopRequireDefault(_);

/**
 * Default serializer implementation. It doesn't have an ID, because it doesn't
 * need one.
 */

var DefaultSerializer = (function (_Serializer) {
  _inherits(DefaultSerializer, _Serializer);

  function DefaultSerializer() {
    _classCallCheck(this, DefaultSerializer);

    _get(Object.getPrototypeOf(DefaultSerializer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DefaultSerializer, [{
    key: 'showResponse',
    value: function showResponse(context, records, include) {
      var response = context.response;

      if (!records) {
        response.payload = _Object$keys(this.recordTypes);
        return context;
      }

      if (include) records.include = include;
      response.payload = records;

      return context;
    }
  }, {
    key: 'showError',
    value: function showError(context, error) {
      var response = context.response;
      var name = error.name;
      var message = error.message;

      response.payload = _Object$assign({ name: name }, message ? { message: message } : null);

      return context;
    }
  }, {
    key: 'parseCreate',
    value: function parseCreate(context) {
      return parse.call(this, context);
    }
  }, {
    key: 'parseUpdate',
    value: function parseUpdate(context) {
      return parse.call(this, context);
    }
  }]);

  return DefaultSerializer;
})(_2['default']);

exports['default'] = DefaultSerializer;

function parse(context) {
  var BadRequestError = this.errors.BadRequestError;
  var _context$request = context.request;
  var ids = _context$request.ids;
  var payload = _context$request.payload;

  if (ids) throw new BadRequestError('IDs should not be specified.');
  if (!payload) throw new BadRequestError('Payload is missing.');

  return (0, _clone2['default'])(payload);
}
module.exports = exports['default'];