'use strict';

var _WeakMap = require('babel-runtime/core-js/weak-map')['default'];

var _Number$isNaN = require('babel-runtime/core-js/number/is-nan')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = castValue;

var _commonErrors = require('../common/errors');

var castByType = new _WeakMap([[Number, function (x) {
  return parseInt(x, 10);
}], [Date, function (x) {
  if (typeof x === 'string') {
    x = Date.parse(x);
    if (_Number$isNaN(x)) throw new _commonErrors.BadRequestError('Date string must be an ISO 8601 formatted string.');
  }
  x = new Date(x);
  if (_Number$isNaN(x.getTime())) throw new _commonErrors.BadRequestError('Date value is invalid.');
  return x;
}], [Buffer, function (x) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var bufferEncoding = options.bufferEncoding || 'base64';

  if (typeof x !== 'string') throw new _commonErrors.BadRequestError('Buffer value must be a ' + bufferEncoding + '-encoded string.');
  return new Buffer(x, bufferEncoding);
}], [Boolean, function (x) {
  if (typeof x === 'string') return x === 'true';
  return Boolean(x);
}], [Object, function (x) {
  if (typeof x === 'string') return JSON.parse(x);
  if (typeof x === 'object') return x;
  throw new _commonErrors.BadRequestError('Could not cast "' + x + '" to JSON.');
}], [String, function (x) {
  return x.toString();
}]]);

/**
 * Cast a value to the given type. Skip if type is missing or value is null.
 *
 * @param {*} value
 * @param {Function} type - Constructor function.
 * @param {Object} [options]
 * @return {*}
 */

function castValue(value, type, options) {
  return type && castByType.has(type) && value !== null ? castByType.get(type)(value, options) : value;
}

module.exports = exports['default'];