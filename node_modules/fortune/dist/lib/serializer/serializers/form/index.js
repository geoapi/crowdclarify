'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Number$parseFloat = require('babel-runtime/core-js/number/parse-float')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _busboy = require('busboy');

var _busboy2 = _interopRequireDefault(_busboy);

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

function inherit(Serializer) {
  return (function (_Serializer) {
    _inherits(FormSerializer, _Serializer);

    function FormSerializer() {
      _classCallCheck(this, FormSerializer);

      _get(Object.getPrototypeOf(FormSerializer.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(FormSerializer, [{
      key: 'processRequest',
      value: function processRequest() {
        throw new this.errors.UnsupportedError('Form input only.');
      }
    }, {
      key: 'parseCreate',
      value: function parseCreate(context) {
        var _context$request = context.request;
        var meta = _context$request.meta;
        var payload = _context$request.payload;
        var type = _context$request.type;
        var recordTypes = this.recordTypes;
        var options = this.options;
        var castValue = this.castValue;
        var _keys = this.keys;
        var isArrayKey = _keys.isArray;
        var typeKey = _keys.type;

        var fields = recordTypes[type];
        var busboy = new _busboy2['default']({ headers: meta });
        var bufferStream = new _stream2['default'].PassThrough();
        var record = {};

        return new _Promise(function (resolve) {
          busboy.on('file', function (field, file, filename) {
            var fieldDefinition = fields[field] || {};
            var fieldIsArray = fieldDefinition[isArrayKey];
            var chunks = [];

            if (fieldIsArray && !(field in record)) record[field] = [];

            file.on('data', function (chunk) {
              return chunks.push(chunk);
            });
            file.on('end', function () {
              var data = Buffer.concat(chunks);
              data.filename = filename;

              if (fieldIsArray) return record[field].push(data);

              if (record[field]) {
                if (Array.isArray(record[field])) record[field].push(data);else record[field] = [record[field], data];
                return null;
              }

              record[field] = data;
            });
          });

          busboy.on('field', function (field, value) {
            var fieldDefinition = fields[field] || {};
            var fieldType = fieldDefinition[typeKey];
            var fieldIsArray = fieldDefinition[isArrayKey];
            value = castValue(value, fieldType, options);

            if (fieldIsArray) {
              if (!(field in record)) record[field] = [];
              return record[field].push(value);
            }

            if (record[field]) {
              if (Array.isArray(record[field])) record[field].push(value);else record[field] = [record[field], value];
              return null;
            }

            record[field] = value;
          });

          busboy.on('finish', function () {
            return resolve([record]);
          });

          bufferStream.end(payload);
          bufferStream.pipe(busboy);
        });
      }
    }, {
      key: 'parseUpdate',
      value: function parseUpdate(context) {
        var BadRequestError = this.errors.BadRequestError;
        var primaryKey = this.keys.primary;

        return this.parseCreate(context).then(function (records) {
          return records.map(function (record) {
            var id = (function (id) {
              // Stolen from jQuery source code:
              // https://api.jquery.com/jQuery.isNumeric/
              var float = _Number$parseFloat(id);
              return id - float + 1 >= 0 ? float : id;
            })(record[primaryKey]);

            if (!id) throw new BadRequestError('ID is missing.');
            delete record[primaryKey];

            return { id: id, replace: record };
          });
        });
      }
    }]);

    return FormSerializer;
  })(Serializer);
}

var formUrlEncoded = function formUrlEncoded(Serializer) {
  return _Object$assign(inherit(Serializer), { id: 'application/x-www-form-urlencoded' });
};

exports.formUrlEncoded = formUrlEncoded;
var formData = function formData(Serializer) {
  return _Object$assign(inherit(Serializer), { id: 'multipart/form-data' });
};
exports.formData = formData;