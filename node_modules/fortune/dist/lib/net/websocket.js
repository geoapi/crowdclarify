'use strict';

var _Object$getOwnPropertySymbols = require('babel-runtime/core-js/object/get-own-property-symbols')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = websocket;

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _ = require('../');

var _2 = _interopRequireDefault(_);

var _commonChange = require('../common/change');

var _commonChange2 = _interopRequireDefault(_commonChange);

var inParens = /\(([^\)]+)\)/;

/**
 * This function returns a WebSocket server, which internally uses the `ws`
 * module. The options are the same as those listed
 * [here](https://einaros.github.io/ws/).
 *
 * The change handler function is called with two arguments: the socket
 * instance for each connection, and the change event. It may return a Promise
 * which resolves to the data to send over the wire.
 *
 * @param {Fortune} instance
 * @param {Object} options
 * @param {Function} [change]
 * @return {WebSocket.Server}
 */

function websocket(instance, options, change) {
  if (!(instance instanceof _2['default'])) throw new Error('An instance of Fortune is required.');

  if (typeof change === 'undefined') change = function (socket, event) {
    return JSON.stringify(_Object$getOwnPropertySymbols(event).reduce(function (object, symbol) {
      var description = (symbol.toString().match(inParens) || [])[1];
      if (description) object[description] = event[symbol];
      return object;
    }, {}));
  };

  var server = new _ws2['default'].Server(options);

  server.on('connection', function (socket) {
    socket.on('close', function () {
      return instance.removeListener(_commonChange2['default'], changeHandler);
    });
    instance.on(_commonChange2['default'], changeHandler);

    function changeHandler(event) {
      _Promise.resolve(change(socket, event)).then(function (result) {
        return result ? socket.send(result) : null;
      });
    }
  });

  return server;
}

module.exports = exports['default'];