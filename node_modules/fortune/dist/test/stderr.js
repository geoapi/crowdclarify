'use strict';

var _slice = require('babel-runtime/helpers/slice')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Array$from = require('babel-runtime/core-js/array/from')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.warn = warn;
exports.log = log;
exports.info = info;
exports.debug = debug;
exports.error = error;

var _tapdance = require('tapdance');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var newLine = '\n';

function warn() {
  return helper.apply(undefined, ['yellow'].concat(_slice.call(arguments)));
}

function log() {
  return helper.apply(undefined, ['green'].concat(_slice.call(arguments)));
}

function info() {
  return helper.apply(undefined, ['blue'].concat(_slice.call(arguments)));
}

function debug() {
  return helper.apply(undefined, ['cyan'].concat(_slice.call(arguments)));
}

function error() {
  var formatLine = function formatLine(line) {
    return '  ' + line.trim();
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(arguments), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var argument = _step.value;

      if (argument instanceof Error) {
        var output = argument.stack || argument.name;
        var lines = output.split(newLine);
        var _error = lines[0];
        var trace = lines.slice(1).map(formatLine).join(newLine);

        helper('red', _error);
        if (trace.length) helper('gray', trace);

        continue;
      }
      helper('red', argument);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function helper(color) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var output = _Array$from(args, function (argument) {
    return typeof argument === 'object' ? _util2['default'].inspect(argument, {
      depth: null
    }) : argument;
  }).join(' ');

  var decorate = function decorate(line) {
    return _chalk2['default'][color](line);
  };

  output.split(newLine).map(decorate).forEach(_tapdance.comment);
}