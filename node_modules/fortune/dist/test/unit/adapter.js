'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _slice = require('babel-runtime/helpers/slice')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _ref, _ref2;

var _tapdance = require('tapdance');

var _libAdapter = require('../../lib/adapter');

var _libAdapter2 = _interopRequireDefault(_libAdapter);

var _libCommonArray_proxy = require('../../lib/common/array_proxy');

var _libCommonKeys = require('../../lib/common/keys');

var keys = _interopRequireWildcard(_libCommonKeys);

var _libCommonErrors = require('../../lib/common/errors');

var errors = _interopRequireWildcard(_libCommonErrors);

var _stderr = require('../stderr');

var stderr = _interopRequireWildcard(_stderr);

var _helpers = require('../helpers');

var type = 'user';

var recordTypes = {
  user: {
    name: { type: String },
    age: { type: Number },
    isAlive: { type: Boolean },
    birthday: { type: Date },
    junk: { type: Object },
    picture: { type: Buffer },
    privateKeys: { type: Buffer, isArray: true },
    nicknames: { type: String, isArray: true },
    friends: { link: 'user', isArray: true, inverse: 'friends' },
    nemesis: { link: 'user', inverse: '__user_nemesis_inverse' },
    '__user_nemesis_inverse': _defineProperty({ link: 'user', isArray: true,
      inverse: 'nemesis' }, keys.denormalizedInverse, true),
    bestFriend: { link: 'user', inverse: 'bestFriend' }
  }
};

var deadbeef = new Buffer('deadbeef', 'hex');
var key1 = new Buffer('cafe', 'hex');
var key2 = new Buffer('babe', 'hex');

var records = [(_ref = {}, _defineProperty(_ref, keys.primary, 1), _defineProperty(_ref, 'name', 'bob'), _defineProperty(_ref, 'age', 42), _defineProperty(_ref, 'isAlive', true), _defineProperty(_ref, 'junk', { things: ['a', 'b', 'c'] }), _defineProperty(_ref, 'birthday', new Date()), _defineProperty(_ref, 'friends', [2]), _defineProperty(_ref, 'bestFriend', 2), _ref), (_ref2 = {}, _defineProperty(_ref2, keys.primary, 2), _defineProperty(_ref2, 'name', 'john'), _defineProperty(_ref2, 'age', 36), _defineProperty(_ref2, 'isAlive', false), _defineProperty(_ref2, 'picture', deadbeef), _defineProperty(_ref2, 'privateKeys', [key1, key2]), _defineProperty(_ref2, 'friends', [1]), _defineProperty(_ref2, 'bestFriend', 1), _ref2)];

exports['default'] = function () {
  var test = runTest.bind.apply(runTest, [null].concat(_slice.call(arguments)));

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: nothing');
    return test(function (adapter) {
      return adapter.find(type, []).then(function (records) {
        (0, _helpers.equal)(records.count, 0, 'count is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: id, type checking #1');
    return test(function (adapter) {
      return adapter.find(type, [1]).then(function (records) {
        (0, _helpers.equal)(records.count, 1, 'count is correct');
        (0, _helpers.equal)(records[0][keys.primary], 1, 'id is correct');
        (0, _helpers.ok)(records[0].birthday instanceof Date, 'date type is correct');
        (0, _helpers.equal)(typeof records[0].isAlive, 'boolean', 'boolean type is correct');
        (0, _helpers.equal)(typeof records[0].age, 'number', 'number type is correct');
        (0, _helpers.deepEqual)(records[0].junk, { things: ['a', 'b', 'c'] }, 'object value is correct');
        (0, _helpers.ok)(!(0, _libCommonArray_proxy.includes)(_Object$keys(records[0], '__user_nemesis_inverse')), 'denormalized fields not enumerable');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: id, type checking #2');
    return test(function (adapter) {
      return adapter.find(type, [2]).then(function (records) {
        (0, _helpers.equal)(records.count, 1, 'count is correct');
        (0, _helpers.equal)(records[0][keys.primary], 2, 'id is correct');
        (0, _helpers.ok)(Buffer.isBuffer(records[0].picture), 'buffer type is correct');
        (0, _helpers.ok)(deadbeef.equals(records[0].picture), 'buffer value is correct');
        (0, _helpers.deepEqual)(records[0].privateKeys, [key1, key2], 'array of buffers is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: collection');
    return test(function (adapter) {
      return adapter.find(type).then(function (records) {
        (0, _helpers.equal)(records.count, 2, 'count is correct');
        testIds(records, 'id type is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: match (string)');
    return test(function (adapter) {
      return adapter.find(type, null, { match: { name: ['john', 'xyz'], age: 36 } }).then(function (records) {
        (0, _helpers.equal)(records.length, 1, 'match length is correct');
        (0, _helpers.equal)(records[0].name, 'john', 'matched correct record');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: match (buffer)');
    return test(function (adapter) {
      return adapter.find(type, null, { match: { picture: deadbeef } }).then(function (records) {
        (0, _helpers.equal)(records.length, 1, 'match length is correct');
        (0, _helpers.ok)(records[0].picture.equals(deadbeef), 'matched correct record');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: match (nothing)');
    return test(function (adapter) {
      return adapter.find(type, null, { match: { name: 'bob', age: 36 } }).then(function (records) {
        (0, _helpers.equal)(records.length, 0, 'match length is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: sort ascending');
    return test(function (adapter) {
      return adapter.find(type, null, { sort: { age: true } }).then(function (records) {
        (0, _helpers.deepEqual)(records.map(function (record) {
          return record.age;
        }), [36, 42], 'ascending sort order correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: sort descending');
    return test(function (adapter) {
      return adapter.find(type, null, { sort: { age: false } }).then(function (records) {
        (0, _helpers.deepEqual)(records.map(function (record) {
          return record.age;
        }), [42, 36], 'descending sort order correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: sort combination');
    return test(function (adapter) {
      return adapter.find(type, null, { sort: { age: true, name: true } }).then(function (records) {
        (0, _helpers.deepEqual)(records.map(function (record) {
          return record.age;
        }), [36, 42], 'sort order is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: offset + limit');
    return test(function (adapter) {
      return adapter.find(type, null, { offset: 1, limit: 1, sort: { name: true } }).then(function (records) {
        (0, _helpers.equal)(records[0].name, 'john', 'record is correct');
        (0, _helpers.equal)(records.length, 1, 'offset length is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: fields #1');
    return test(function (adapter) {
      return adapter.find(type, null, { fields: { name: true, isAlive: true } }).then(function (records) {
        (0, _helpers.ok)(records.every(function (record) {
          return _Object$keys(record).length === 3;
        }), 'fields length is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('find: fields #2');
    return test(function (adapter) {
      return adapter.find(type, null, { fields: { name: false, isAlive: false } }).then(function (records) {
        (0, _helpers.ok)(records.every(function (record) {
          return _Object$keys(record).length === 10;
        }), 'fields length is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('create: no-op');
    return test(function (adapter) {
      return adapter.create(type, []).then(function (records) {
        (0, _helpers.deepEqual)(records, [], 'response is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('create: type check');
    return test(function (adapter) {
      var date = new Date();

      return adapter.create(type, [{
        id: 3,
        picture: deadbeef,
        birthday: date
      }]).then(function (records) {
        (0, _helpers.ok)(deadbeef.equals(records[0].picture), 'buffer type is correct');
        (0, _helpers.ok)(Math.abs(records[0].birthday.getTime() - date.getTime()) < 1000, 'date value is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('create: duplicate id creation should fail');
    return test(function (adapter) {
      return adapter.create(type, [_defineProperty({}, keys.primary, 1)]).then(function () {
        (0, _tapdance.fail)('duplicate id creation should have failed');
      })['catch'](function (error) {
        (0, _helpers.ok)(error instanceof errors.ConflictError, 'error type is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('create: id generation and lookup');
    return test(function (adapter) {
      var id = undefined;

      return adapter.create(type, [{
        name: 'joe'
      }]).then(function (records) {
        id = records[0][keys.primary];
        testIds(records, 'id type is correct');

        (0, _helpers.equal)(records[0].picture, null, 'missing singular value is null');
        (0, _helpers.deepEqual)(records[0].nicknames, [], 'missing array value is empty array');

        return adapter.find(type, [id]);
      }).then(function (records) {
        (0, _helpers.equal)(records.length, 1, 'match length is correct');
        (0, _helpers.equal)(records[0][keys.primary], id, 'id is matching');
        testIds(records, 'id type is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('update: no-op');
    return test(function (adapter) {
      return adapter.update(type, []).then(function (number) {
        (0, _helpers.equal)(number, 0, 'number is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('update: not found');
    return test(function (adapter) {
      var _ref4;

      return adapter.update(type, [(_ref4 = {}, _defineProperty(_ref4, keys.primary, 3), _defineProperty(_ref4, 'replace', { foo: 'bar' }), _ref4)]).then(function (number) {
        (0, _helpers.equal)(number, 0, 'number is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('update: replace');
    return test(function (adapter) {
      var _ref5, _ref6;

      return adapter.update(type, [(_ref5 = {}, _defineProperty(_ref5, keys.primary, 1), _defineProperty(_ref5, 'replace', { name: 'billy' }), _ref5), (_ref6 = {}, _defineProperty(_ref6, keys.primary, 2), _defineProperty(_ref6, 'replace', { name: 'billy', nicknames: ['pepe'] }), _ref6)]).then(function (number) {
        (0, _helpers.equal)(number, 2, 'number updated correct');
        return adapter.find(type);
      }).then(function (records) {
        (0, _helpers.deepEqual)((0, _libCommonArray_proxy.find)(records, function (record) {
          return record[keys.primary] === 2;
        }).nicknames, ['pepe'], 'array updated');
        (0, _helpers.equal)(records.filter(function (record) {
          return record.name !== 'billy';
        }).length, 0, 'field updated on set');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('update: unset');
    return test(function (adapter) {
      var _ref7, _ref8;

      return adapter.update(type, [(_ref7 = {}, _defineProperty(_ref7, keys.primary, 1), _defineProperty(_ref7, 'replace', { name: null }), _ref7), (_ref8 = {}, _defineProperty(_ref8, keys.primary, 2), _defineProperty(_ref8, 'replace', { name: null }), _ref8)]).then(function (number) {
        (0, _helpers.equal)(number, 2, 'number updated correct');
        return adapter.find(type);
      }).then(function (records) {
        (0, _helpers.equal)(records.filter(function (record) {
          return record.name !== null;
        }).length, 0, 'field updated on unset');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('update: push');
    return test(function (adapter) {
      var _ref9, _ref10;

      return adapter.update(type, [(_ref9 = {}, _defineProperty(_ref9, keys.primary, 1), _defineProperty(_ref9, 'push', { friends: 5 }), _ref9), (_ref10 = {}, _defineProperty(_ref10, keys.primary, 2), _defineProperty(_ref10, 'push', { friends: [5] }), _ref10)]).then(function (number) {
        (0, _helpers.equal)(number, 2, 'number updated correct');
        return adapter.find(type);
      }).then(function (records) {
        (0, _helpers.equal)(records.filter(function (record) {
          return (0, _libCommonArray_proxy.includes)(record.friends, 5);
        }).length, records.length, 'value pushed');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('update: pull');
    return test(function (adapter) {
      var _ref11, _ref12;

      return adapter.update(type, [(_ref11 = {}, _defineProperty(_ref11, keys.primary, 1), _defineProperty(_ref11, 'pull', { friends: 2 }), _ref11), (_ref12 = {}, _defineProperty(_ref12, keys.primary, 2), _defineProperty(_ref12, 'pull', { friends: [1] }), _ref12)]).then(function (number) {
        (0, _helpers.equal)(number, 2, 'number updated correct');
        return adapter.find(type);
      }).then(function (records) {
        (0, _helpers.equal)(records.filter(function (record) {
          return record.friends.length;
        }).length, 0, 'value pulled');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('delete: no-op');
    return test(function (adapter) {
      return adapter['delete'](type, []).then(function (number) {
        (0, _helpers.equal)(number, 0, 'number is correct');
      });
    });
  });

  (0, _tapdance.run)(function () {
    (0, _tapdance.comment)('delete');
    return test(function (adapter) {
      return adapter['delete'](type, [1, 3]).then(function (number) {
        (0, _helpers.equal)(number, 1, 'number deleted correct');
        return adapter.find(type, [1, 2]);
      }).then(function (records) {
        (0, _helpers.equal)(records.count, 1, 'count correct');
        (0, _helpers.deepEqual)(records.map(function (record) {
          return record[keys.primary];
        }), [2], 'record deleted');
      });
    });
  });
};

function runTest(a, options, fn) {
  if (options === undefined) options = {};

  // Check if it's a class or a dependency injection function.
  try {
    a = a(_libAdapter2['default']);
  } catch (error) {
    if (!(error instanceof TypeError)) throw error;
  }

  var A = a;
  var adapter = new A({
    options: options, keys: keys, errors: errors, recordTypes: recordTypes
  });

  return adapter.connect().then(function () {
    return adapter['delete'](type);
  }).then(function () {
    return adapter.create(type, records);
  }).then(function () {
    return fn(adapter);
  }).then(function () {
    return adapter['delete'](type, records.map(function (record) {
      return record[keys.primary];
    }));
  }).then(function () {
    return adapter.disconnect();
  })['catch'](function (error) {
    stderr.error(error);
    adapter.disconnect();
    (0, _tapdance.fail)(error);
  });
}

function testIds(records, message) {
  (0, _helpers.equal)((0, _libCommonArray_proxy.find)(records.map(function (record) {
    return (0, _libCommonArray_proxy.includes)(['string', 'number'], typeof record[keys.primary]);
  }), function (b) {
    return !b;
  }), undefined, message);
}
module.exports = exports['default'];