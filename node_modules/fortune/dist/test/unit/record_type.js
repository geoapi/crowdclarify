'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _Symbol = require('babel-runtime/core-js/symbol')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _tapdance = require('tapdance');

var _libRecord_typeEnsure_types = require('../../lib/record_type/ensure_types');

var _libRecord_typeEnsure_types2 = _interopRequireDefault(_libRecord_typeEnsure_types);

var _libRecord_typeValidate = require('../../lib/record_type/validate');

var _libRecord_typeValidate2 = _interopRequireDefault(_libRecord_typeValidate);

var _libRecord_typeEnforce = require('../../lib/record_type/enforce');

var _libRecord_typeEnforce2 = _interopRequireDefault(_libRecord_typeEnforce);

var _libCommonKeys = require('../../lib/common/keys');

var keys = _interopRequireWildcard(_libCommonKeys);

var _helpers = require('../helpers');

var recordType = 'person';
var fields = {
  name: { type: String },
  birthdate: { type: Date, junk: 'asdf' },
  mugshot: { type: Buffer },
  luckyNumbers: { type: Number, isArray: true },
  friends: { link: 'person', isArray: true, inverse: 'friends' },
  spouse: { link: 'person', inverse: 'spouse' },
  toys: { type: Object, isArray: true },
  location: { type: _Symbol('Geolocation data') }
};

var testFields = function testFields(fields) {
  return function () {
    return (0, _libRecord_typeValidate2['default'])(fields);
  };
};
var testField = function testField(field) {
  return function () {
    return (0, _libRecord_typeValidate2['default'])(_defineProperty({}, field, fields[field]));
  };
};

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('validate field definition');

  // Test for valid fields.
  var valid = 'valid field is valid';

  (0, _tapdance.pass)(testField('name'), valid);
  (0, _tapdance.pass)(testField('birthdate'), valid);
  (0, _tapdance.pass)(testField('mugshot'), valid);
  (0, _tapdance.pass)(testField('luckyNumbers'), valid);
  (0, _tapdance.pass)(testField('friends'), valid);
  (0, _tapdance.pass)(testField('toys'), valid);
  (0, _tapdance.pass)(testField('location'), valid);

  // Test for invalid fields.
  var invalid = 'invalid field throws error';

  (0, _tapdance.fail)(testFields({ badType: 'asdf' }), invalid);
  (0, _tapdance.fail)(testFields({ nested: { thing: { type: String } } }), invalid);
  (0, _tapdance.fail)(testFields({
    typeAndLink: { type: String, link: 'y', inverse: 'friends' }
  }), invalid);
  (0, _tapdance.fail)(testFields({ nonexistent: NaN }), invalid);
  (0, _tapdance.fail)(testFields({ nullEdgeCase: null }), invalid);
  (0, _tapdance.fail)(testFields({ fake: { type: Array } }), invalid);
});

(0, _tapdance.run)(function () {
  var _testRecord, _testRecord2, _testRecord3;

  (0, _tapdance.comment)('enforce field definition');

  var testRecord = function testRecord(record) {
    return function () {
      return (0, _libRecord_typeEnforce2['default'])(recordType, record, fields);
    };
  };
  var bad = 'bad type is bad';
  var good = 'good type is good';

  (0, _tapdance.fail)(testRecord((_testRecord = {}, _defineProperty(_testRecord, keys.primary, 1), _defineProperty(_testRecord, 'spouse', 1), _testRecord)), bad);
  (0, _tapdance.fail)(testRecord({ spouse: [2] }), bad);
  (0, _tapdance.fail)(testRecord({ friends: 2 }), bad);
  (0, _tapdance.fail)(testRecord((_testRecord2 = {}, _defineProperty(_testRecord2, keys.primary, 1), _defineProperty(_testRecord2, 'friends', [1]), _testRecord2)), bad);
  (0, _tapdance.fail)(testRecord({ name: {} }), bad);
  (0, _tapdance.pass)(testRecord({ name: '' }), good);
  (0, _tapdance.fail)(testRecord({ birthdate: {} }), bad);
  (0, _tapdance.pass)(testRecord({ birthdate: new Date() }), good);
  (0, _tapdance.fail)(testRecord({ mugshot: {} }), bad);
  (0, _tapdance.pass)(testRecord({ mugshot: new Buffer(1) }), good);
  (0, _tapdance.fail)(testRecord({ luckyNumbers: 1 }), bad);
  (0, _tapdance.pass)(testRecord({ luckyNumbers: [1] }), good);
  (0, _tapdance.pass)(testRecord({ location: new ArrayBuffer(8) }), good);
  (0, _tapdance.fail)(testRecord((_testRecord3 = {}, _defineProperty(_testRecord3, keys.primary, 1), _defineProperty(_testRecord3, 'friends', [0, 1, 2]), _testRecord3)), 'record cannot link to itself');
  (0, _helpers.deepEqual)((0, _libRecord_typeEnforce2['default'])(recordType, { friends: ['a', 'b', 'c', 1, 2, 3] }, fields).friends, ['a', 'b', 'c', 1, 2, 3], 'links are untouched');
  (0, _helpers.equal)((0, _libRecord_typeEnforce2['default'])(recordType, { random: 'abc' }, fields).random, undefined, 'arbitrary fields are dropped');
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('ensure record types');
  var check = function check(recordTypes) {
    return function () {
      return (0, _libRecord_typeEnsure_types2['default'])(recordTypes);
    };
  };

  (0, _tapdance.fail)(check({
    post: {
      comments: { link: 'comment', isArray: true }
    }
  }), 'record type must exist');

  (0, _tapdance.fail)(check({
    post: {
      comments: { link: 'comment', isArray: true, inverse: 'post' }
    }
  }), 'inverse must exist');

  (0, _tapdance.fail)(check({
    post: {
      comments: { link: 'comment', isArray: true, inverse: 'post' }
    },
    comment: {
      post: { link: 'post', inverse: 'foo' }
    }
  }), 'inverse is incorrect');

  (0, _tapdance.fail)(check({
    post: {
      comments: { link: 'comment', inverse: 'post' }
    },
    comment: {
      post: { link: 'foo', inverse: 'comments' }
    }
  }), 'inverse link is incorrect');

  (0, _tapdance.pass)(check({
    post: {
      comments: { link: 'comment', isArray: true, inverse: 'post' }
    },
    comment: {
      post: { link: 'post', inverse: 'comments' }
    }
  }), 'valid linking');

  (0, _tapdance.pass)(check({
    user: {
      friends: { link: 'user', isArray: true, inverse: 'friends' }
    }
  }), 'self inverse is valid');

  var recordTypes = {
    post: {
      comments: { link: 'comment', isArray: true }
    },
    comment: {}
  };

  (0, _libRecord_typeEnsure_types2['default'])(recordTypes);

  var denormalizedField = '__post_comments_inverse';

  (0, _helpers.equal)(recordTypes.post.comments[keys.inverse], denormalizedField, 'denormalized inverse field assigned');

  (0, _helpers.equal)(recordTypes.comment[denormalizedField][keys.link], 'post', 'denormalized inverse field link correct');

  (0, _helpers.equal)(recordTypes.comment[denormalizedField][keys.isArray], true, 'denormalized inverse field is array');

  (0, _helpers.equal)(recordTypes.comment[denormalizedField][keys.denormalizedInverse], true, 'denormalized inverse field set');
});