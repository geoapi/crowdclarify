'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _tapdance = require('tapdance');

var _libSerializerDefault = require('../../lib/serializer/default');

var _libSerializerDefault2 = _interopRequireDefault(_libSerializerDefault);

var _libCommonErrors = require('../../lib/common/errors');

var errors = _interopRequireWildcard(_libCommonErrors);

var _helpers = require('../helpers');

var recordTypes = { foo: {}, bar: {} };
var serializer = new _libSerializerDefault2['default']({ errors: errors, recordTypes: recordTypes });

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('show response: no records');

  var context = { response: {} };

  serializer.showResponse(context);

  (0, _helpers.deepEqual)(context.response.payload, ['foo', 'bar'], 'types displayed');
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('show response: records');

  var context = { response: {} };
  var records = [1, 2, 3];

  serializer.showResponse(context, records);

  (0, _helpers.deepEqual)(context.response.payload, records, 'records displayed');
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('show response: records with include');

  var context = { response: {} };
  var records = [1, 2, 3];
  var include = {
    foo: ['a', 'b']
  };

  serializer.showResponse(context, records, include);

  (0, _helpers.deepEqual)(context.response.payload, records, 'records displayed');
  (0, _helpers.deepEqual)(context.response.payload.include, include, 'include displayed');
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('show error');

  var context = { response: {} };
  var error = new TypeError('wtf');

  serializer.showError(context, error);

  (0, _helpers.equal)(context.response.payload.name, 'TypeError', 'error name displayed');
  (0, _helpers.equal)(context.response.payload.message, 'wtf', 'error message displayed');
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('parse create');

  (0, _tapdance.fail)(function () {
    return serializer.parseCreate({ request: { ids: [] } });
  }, 'ids can\'t be specified in ids field');
  (0, _tapdance.fail)(function () {
    return serializer.parseCreate({ request: { payload: null } });
  }, 'payload can not be empty');
  (0, _helpers.deepEqual)(serializer.parseCreate({ request: { payload: ['foo'] } }), ['foo'], 'return value is correct');
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('parse update');

  (0, _tapdance.fail)(function () {
    return serializer.parseCreate({ request: { ids: [] } });
  }, 'ids can\'t be specified in ids field');
  (0, _tapdance.fail)(function () {
    return serializer.parseCreate({ request: { payload: null } });
  }, 'payload can not be empty');
  (0, _helpers.deepEqual)(serializer.parseCreate({ request: { payload: ['foo'] } }), ['foo'], 'return value is correct');
});