'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _tapdance = require('tapdance');

var _helpers = require('../../helpers');

var _http = require('../http');

var _http2 = _interopRequireDefault(_http);

var _libSerializerSerializersJson = require('../../../lib/serializer/serializers/json');

var _libSerializerSerializersJson2 = _interopRequireDefault(_libSerializerSerializersJson);

var test = _http2['default'].bind(null, {
  serializers: [{ type: _libSerializerSerializersJson2['default'] }]
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get index');
  return test('/', null, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body, ['user', 'animal', '☯'], 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get empty collection');
  return test(encodeURI('/☯'), null, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body, [], 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get records');
  return test('/user', null, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.equal)(response.body.length, 3, 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get records by ID');
  return test('/animal/1,%2Fwtf', null, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body.map(function (record) {
      return record.id;
    }), [1, '/wtf'], 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get records with fields');
  return test('/animal?' + _querystring2['default'].stringify({
    fields: 'name,owner'
  }), null, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body.map(function (record) {
      return _Object$keys(record).length;
    }), [4, 4, 4, 4], 'response body fields are correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get records with match');
  return test('/animal?' + _querystring2['default'].stringify({
    'match[name]': 'Fido'
  }), null, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.equal)(response.body[0].name, 'Fido', 'match is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get records with sort/limit/offset');
  return test('/animal?' + _querystring2['default'].stringify({
    sort: 'name',
    limit: 2,
    offset: 1
  }), null, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body.map(function (record) {
      return record.name;
    }), ['Fido', 'Sniffles'], 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('create records');
  return test('/animal', {
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    body: [{
      name: 'Ayy lmao',
      nicknames: ['ayy', 'lmao'],
      owner: 1
    }]
  }, function (response) {
    (0, _helpers.equal)(response.status, 201, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body.map(function (record) {
      return record.name;
    }), ['Ayy lmao'], 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('update records');
  return test('/animal', {
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    body: [{
      id: '/wtf',
      replace: { name: 'Ayy lmao' }
    }]
  }, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body.map(function (record) {
      return record.name;
    }), ['Ayy lmao'], 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('delete records');
  return test('/animal/1,%2Fwtf', {
    method: 'delete'
  }, function (response) {
    (0, _helpers.equal)(response.status, 204, 'status is correct');
  });
});