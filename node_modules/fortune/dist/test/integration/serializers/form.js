'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _tapdance = require('tapdance');

var _helpers = require('../../helpers');

var _http3 = require('../http');

var _http4 = _interopRequireDefault(_http3);

var _libSerializerSerializersJson = require('../../../lib/serializer/serializers/json');

var _libSerializerSerializersJson2 = _interopRequireDefault(_libSerializerSerializersJson);

var _libSerializerSerializersForm = require('../../../lib/serializer/serializers/form');

var _test_instance = require('../test_instance');

var _test_instance2 = _interopRequireDefault(_test_instance);

var _lib = require('../../../lib');

var _lib2 = _interopRequireDefault(_lib);

var options = {
  serializers: [{ type: _libSerializerSerializersJson2['default'] }, { type: _libSerializerSerializersForm.formUrlEncoded }, { type: _libSerializerSerializersForm.formData }]
};

var test = _http4['default'].bind(null, options);

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get anything should fail');
  return test('/', {
    headers: { 'Accept': 'application/x-www-form-urlencoded' }
  }, function (response) {
    (0, _helpers.equal)(response.status, 415, 'status is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('create records using urlencoded data');
  return test('/animal', {
    method: 'post',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: _querystring2['default'].stringify({
      name: 'Ayy lmao',
      nicknames: ['ayy', 'lmao']
    })
  }, function (response) {
    (0, _helpers.equal)(response.status, 201, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body.map(function (record) {
      return record.name;
    }), ['Ayy lmao'], 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('update records using urlencoded data');
  return test('/animal', {
    method: 'post',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'X-HTTP-Method': 'PATCH'
    },
    body: _querystring2['default'].stringify({
      id: 1,
      name: 'Ayy lmao',
      nicknames: ['ayy', 'lmao']
    })
  }, function (response) {
    (0, _helpers.equal)(response.status, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');
    (0, _helpers.deepEqual)(response.body.map(function (record) {
      return record.name;
    }), ['Ayy lmao'], 'response body is correct');
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('create records using form data');

  var server = undefined;
  var store = undefined;
  var deadbeef = new Buffer('deadbeef', 'hex');
  var form = new _formData2['default']();
  form.append('name', 'Ayy lmao');
  form.append('picture', deadbeef, { filename: 'deadbeef.dump' });

  return (0, _test_instance2['default'])(options).then(function (s) {
    store = s;
    server = _http2['default'].createServer(_lib2['default'].net.http(store)).listen(1337);
  }).then(function () {
    return new _Promise(function (resolve, reject) {
      return form.submit('http://localhost:1337/animal', function (error, response) {
        return error ? reject(error) : resolve(response);
      });
    });
  }).then(function (response) {
    (0, _helpers.equal)(response.statusCode, 201, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');

    return new _Promise(function (resolve) {
      var chunks = [];
      response.on('data', function (chunk) {
        return chunks.push(chunk);
      });
      response.on('end', function () {
        return resolve(Buffer.concat(chunks));
      });
    });
  }).then(function (payload) {
    var body = JSON.parse(payload.toString());
    (0, _helpers.deepEqual)(body.map(function (record) {
      return record.name;
    }), ['Ayy lmao'], 'name is correct');
    (0, _helpers.deepEqual)(body.map(function (record) {
      return record.picture;
    }), [deadbeef.toString('base64')], 'picture is correct');
    store.disconnect();
    server.close();
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('update records using form data');

  var server = undefined;
  var store = undefined;
  var deadbeef = new Buffer('deadbeef', 'hex');
  var form = new _formData2['default']();
  form.append('id', 1);
  form.append('name', 'Ayy lmao');
  form.append('picture', deadbeef, { filename: 'deadbeef.dump' });

  return (0, _test_instance2['default'])(options).then(function (s) {
    store = s;
    server = _http2['default'].createServer(_lib2['default'].net.http(store)).listen(1337);
  }).then(function () {
    return new _Promise(function (resolve, reject) {
      return form.submit({
        host: 'localhost',
        port: 1337,
        path: '/animal',
        headers: { 'X-HTTP-Method': 'PATCH' }
      }, function (error, response) {
        return error ? reject(error) : resolve(response);
      });
    });
  }).then(function (response) {
    (0, _helpers.equal)(response.statusCode, 200, 'status is correct');
    (0, _helpers.ok)(~response.headers['content-type'].indexOf('application/json'), 'content type is correct');

    return new _Promise(function (resolve) {
      var chunks = [];
      response.on('data', function (chunk) {
        return chunks.push(chunk);
      });
      response.on('end', function () {
        return resolve(Buffer.concat(chunks));
      });
    });
  }).then(function (payload) {
    var body = JSON.parse(payload.toString());
    (0, _helpers.deepEqual)(body.map(function (record) {
      return record.name;
    }), ['Ayy lmao'], 'name is correct');
    (0, _helpers.deepEqual)(body.map(function (record) {
      return record.picture;
    }), [deadbeef.toString('base64')], 'picture is correct');
    store.disconnect();
    server.close();
  });
});