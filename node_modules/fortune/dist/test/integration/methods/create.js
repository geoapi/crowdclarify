'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _ref;

var _tapdance = require('tapdance');

var _helpers = require('../../helpers');

var _test_instance = require('../test_instance');

var _test_instance2 = _interopRequireDefault(_test_instance);

var _stderr = require('../../stderr');

var stderr = _interopRequireWildcard(_stderr);

var _libCommonArray_proxy = require('../../../lib/common/array_proxy');

var arrayProxy = _interopRequireWildcard(_libCommonArray_proxy);

var _libCommonKeys = require('../../../lib/common/keys');

var _libCommonMethods = require('../../../lib/common/methods');

var methods = _interopRequireWildcard(_libCommonMethods);

var _libCommonChange = require('../../../lib/common/change');

var _libCommonChange2 = _interopRequireDefault(_libCommonChange);

var deadcode = new Buffer('deadc0de', 'hex');

var records = [(_ref = {}, _defineProperty(_ref, _libCommonKeys.primary, 4), _defineProperty(_ref, 'name', 'Slimer McGee'), _defineProperty(_ref, 'birthday', new Date(2011, 5, 30)), _defineProperty(_ref, 'friends', [1, 3]), _defineProperty(_ref, 'picture', deadcode), _ref)];

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('create record');

  var store = undefined;

  return (0, _test_instance2['default'])().then(function (instance) {
    store = instance;

    store.on(_libCommonChange2['default'], function (data) {
      (0, _helpers.deepEqual)(data[methods.create].user.sort(function (a, b) {
        return a - b;
      }), [4], 'change event shows created IDs');
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 3], 'change event shows updated IDs');
    });

    return store.request({
      type: 'user',
      method: methods.create,
      payload: records
    });
  }).then(function (response) {
    (0, _helpers.ok)(deadcode.equals(response.payload[0].picture) && deadcode.equals(records[0].picture), 'input object not mutated');
    (0, _helpers.equal)(response.payload.length, 1, 'record created');
    (0, _helpers.equal)(response.payload[0][_libCommonKeys.primary], 4, 'record has correct ID');
    (0, _helpers.ok)(response.payload[0].birthday instanceof Date, 'field has correct type');
    (0, _helpers.equal)(response.payload[0].name, 'Slimer McGee', 'record has correct field value');

    return store.request({
      type: 'user',
      method: methods.find,
      ids: [1, 3]
    });
  }).then(function (response) {
    (0, _helpers.deepEqual)(response.payload.map(function (record) {
      return arrayProxy.find(record.friends, function (id) {
        return id === 4;
      });
    }), [4, 4], 'related records updated');

    return store.disconnect();
  })['catch'](function (error) {
    stderr.error(error);
    store.disconnect();
    (0, _tapdance.fail)(error);
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('create records with same to-one relationship should fail');

  var store = undefined;

  return (0, _test_instance2['default'])().then(function (instance) {
    store = instance;

    return store.request({
      type: 'user',
      method: methods.create,
      payload: [{ spouse: 2 }, { spouse: 2 }]
    });
  }).then(function () {
    (0, _tapdance.fail)('should have failed');
  })['catch'](function () {
    (0, _tapdance.pass)('should reject request');
  });
});