'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _tapdance = require('tapdance');

var _helpers = require('../../helpers');

var _test_instance = require('../test_instance');

var _test_instance2 = _interopRequireDefault(_test_instance);

var _stderr = require('../../stderr');

var stderr = _interopRequireWildcard(_stderr);

var _libCommonKeys = require('../../../lib/common/keys');

var keys = _interopRequireWildcard(_libCommonKeys);

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get index');
  return findTest({
    response: function response(_response) {
      (0, _helpers.deepEqual)(_response.payload.sort(), ['animal', 'user', 'â˜¯'], 'gets the index');
    }
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get collection');
  return findTest({
    request: {
      type: 'user'
    },
    response: function response(_response2) {
      (0, _helpers.equal)(_response2.payload.length, 3, 'gets all records');
    }
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get IDs');
  return findTest({
    request: {
      type: 'user',
      ids: [2, 1]
    },
    response: function response(_response3) {
      (0, _helpers.deepEqual)(_response3.payload.map(function (record) {
        return record[keys.primary];
      }).sort(function (a, b) {
        return a - b;
      }), [1, 2], 'gets records with IDs');
    }
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('get includes');
  return findTest({
    request: {
      type: 'user',
      ids: [1, 2],
      include: [['ownedPets']]
    },
    response: function response(_response4) {
      (0, _helpers.deepEqual)(_response4.payload.map(function (record) {
        return record[keys.primary];
      }).sort(function (a, b) {
        return a - b;
      }), [1, 2], 'gets records with IDs');
      (0, _helpers.deepEqual)(_response4.payload.include.animal.map(function (record) {
        return record[keys.primary];
      }).sort(function (a, b) {
        return a - b;
      }), [1, 2, 3], 'gets included records');
    }
  });
});

function findTest(o) {
  var store = undefined;

  return (0, _test_instance2['default'])().then(function (instance) {
    store = instance;

    return store.request(o.request);
  }).then(function (response) {
    o.response(response);

    return store.disconnect();
  })['catch'](function (error) {
    stderr.error(error);
    store.disconnect();
    (0, _tapdance.fail)(error);
  });
}