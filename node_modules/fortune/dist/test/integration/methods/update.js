'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _tapdance = require('tapdance');

var _helpers = require('../../helpers');

var _test_instance = require('../test_instance');

var _test_instance2 = _interopRequireDefault(_test_instance);

var _stderr = require('../../stderr');

var stderr = _interopRequireWildcard(_stderr);

var _libCommonArray_proxy = require('../../../lib/common/array_proxy');

var arrayProxy = _interopRequireWildcard(_libCommonArray_proxy);

var _libCommonKeys = require('../../../lib/common/keys');

var keys = _interopRequireWildcard(_libCommonKeys);

var _libCommonMethods = require('../../../lib/common/methods');

var methods = _interopRequireWildcard(_libCommonMethods);

var _libCommonChange = require('../../../lib/common/change');

var _libCommonChange2 = _interopRequireDefault(_libCommonChange);

(0, _tapdance.run)(function () {
  var _ref;

  (0, _tapdance.comment)('update one to one with 2nd degree unset');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2, 3], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref = {}, _defineProperty(_ref, keys.primary, 3), _defineProperty(_ref, 'replace', { spouse: 2 }), _ref)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).spouse, null, '2nd degree related field unset');
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).spouse, 3, 'related field set');
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      }).spouse, 2, 'field updated');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref2;

  (0, _tapdance.comment)('update one to one with former related record');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2, 3], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref2 = {}, _defineProperty(_ref2, keys.primary, 2), _defineProperty(_ref2, 'replace', { spouse: 3 }), _ref2)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).spouse, null, 'related field unset');
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).spouse, 3, 'field updated');
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      }).spouse, 2, 'related field set');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref3;

  (0, _tapdance.comment)('update one to one with same value');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref3 = {}, _defineProperty(_ref3, keys.primary, 2), _defineProperty(_ref3, 'replace', { spouse: 1 }), _ref3)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).spouse, 2, 'related field is same');
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).spouse, 1, 'field is same');
    }
  });
});

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('update one to one with multiple same value should fail');

  return (0, _test_instance2['default'])().then(function (store) {
    var _ref4, _ref5;

    return store.request({
      method: methods.update,
      type: 'user',
      payload: [(_ref4 = {}, _defineProperty(_ref4, keys.primary, 2), _defineProperty(_ref4, 'replace', { spouse: 1 }), _ref4), (_ref5 = {}, _defineProperty(_ref5, keys.primary, 3), _defineProperty(_ref5, 'replace', { spouse: 1 }), _ref5)]
    });
  }).then(function () {
    (0, _tapdance.fail)('should have failed');
  })['catch'](function () {
    (0, _tapdance.pass)('multiple same values failed');
  });
});

(0, _tapdance.run)(function () {
  var _ref6;

  (0, _tapdance.comment)('update one to one with null value');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref6 = {}, _defineProperty(_ref6, keys.primary, 2), _defineProperty(_ref6, 'replace', { spouse: null }), _ref6)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).spouse, null, 'related field is updated');
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).spouse, null, 'field is updated');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref7;

  (0, _tapdance.comment)('update one to many (set)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].animal, [1], 'change event shows updated IDs');
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'change event shows related update IDs');
    },
    type: 'animal',
    payload: [(_ref7 = {}, _defineProperty(_ref7, keys.primary, 1), _defineProperty(_ref7, 'replace', { owner: 2 }), _ref7)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).ownedPets, [], 'related field pulled');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).ownedPets.sort(function (a, b) {
        return a - b;
      }), [1, 2, 3], 'related field pushed');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref8;

  (0, _tapdance.comment)('update one to many (unset)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].animal, [1], 'change event shows updated IDs');
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1], 'change event shows related update IDs');
    },
    type: 'animal',
    payload: [(_ref8 = {}, _defineProperty(_ref8, keys.primary, 1), _defineProperty(_ref8, 'replace', { owner: null }), _ref8)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).ownedPets, [], 'related field pulled');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref9;

  (0, _tapdance.comment)('update many to one (push)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'change event shows updated IDs');
      (0, _helpers.deepEqual)(data[methods.update].animal, [1], 'change event shows related update IDs');
    },
    type: 'user',
    payload: [(_ref9 = {}, _defineProperty(_ref9, keys.primary, 2), _defineProperty(_ref9, 'push', { ownedPets: 1 }), _ref9)],
    relatedType: 'animal',
    related: function related(response) {
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).owner, 2, 'related field set');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref10;

  (0, _tapdance.comment)('update many to one (push) with 2nd degree');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user, [1, 2], 'change event shows updated IDs');
      (0, _helpers.deepEqual)(data[methods.update].animal, [2], 'change event shows related update IDs');
    },
    type: 'user',
    payload: [(_ref10 = {}, _defineProperty(_ref10, keys.primary, 1), _defineProperty(_ref10, 'push', { ownedPets: 2 }), _ref10)],
    relatedType: 'animal',
    related: function related(response) {
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).owner, 1, 'related field set');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref11;

  (0, _tapdance.comment)('update many to one (pull)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user, [2], 'change event shows updated IDs');
      (0, _helpers.deepEqual)(data[methods.update].animal, [2, 3], 'change event shows related update IDs');
    },
    type: 'user',
    payload: [(_ref11 = {}, _defineProperty(_ref11, keys.primary, 2), _defineProperty(_ref11, 'pull', { ownedPets: [2, 3] }), _ref11)],
    relatedType: 'animal',
    related: function related(response) {
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).owner, null, 'related field set');
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      }).owner, null, 'related field set');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref12;

  (0, _tapdance.comment)('update many to one (set)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2, 3], 'change event shows updated IDs');
      (0, _helpers.deepEqual)(data[methods.update].animal.sort(function (a, b) {
        return a - b;
      }), [1, 2, 3], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref12 = {}, _defineProperty(_ref12, keys.primary, 3), _defineProperty(_ref12, 'replace', { ownedPets: [1, 2, 3] }), _ref12)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).ownedPets, [], 'related field pulled');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).ownedPets, [], 'related field pulled');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      }).ownedPets, [1, 2, 3], 'field set');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref13;

  (0, _tapdance.comment)('update many to one (set) #2');
  return updateTest({
    type: 'user',
    payload: [(_ref13 = {}, _defineProperty(_ref13, keys.primary, 3), _defineProperty(_ref13, 'replace', { ownedPets: [1, 2, 3] }), _ref13)],
    relatedType: 'animal',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).owner, 3, 'related field set');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).owner, 3, 'related field set');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      }).owner, 3, 'related field set');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref14;

  (0, _tapdance.comment)('update many to one (set) #3');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'change event shows updated IDs');
      (0, _helpers.deepEqual)(data[methods.update].animal.sort(function (a, b) {
        return a - b;
      }), [1, 3], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref14 = {}, _defineProperty(_ref14, keys.primary, 2), _defineProperty(_ref14, 'replace', { ownedPets: [1, 2] }), _ref14)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).ownedPets, [], 'related field pulled');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).ownedPets, [1, 2], 'field set');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref15;

  (0, _tapdance.comment)('update many to one (unset)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [2], 'change event shows updated IDs');
      (0, _helpers.deepEqual)(data[methods.update].animal.sort(function (a, b) {
        return a - b;
      }), [2, 3], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref15 = {}, _defineProperty(_ref15, keys.primary, 2), _defineProperty(_ref15, 'replace', { ownedPets: [] }), _ref15)],
    relatedType: 'animal',
    related: function related(response) {
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).owner, null, 'related field unset');
      (0, _helpers.equal)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      }).owner, null, 'related field unset');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref16;

  (0, _tapdance.comment)('update many to many (push)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref16 = {}, _defineProperty(_ref16, keys.primary, 1), _defineProperty(_ref16, 'push', { friends: 2 }), _ref16)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).friends.sort(function (a, b) {
        return a - b;
      }), [1, 3], 'related ID pushed');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref17;

  (0, _tapdance.comment)('update many to many (pull)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [2, 3], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref17 = {}, _defineProperty(_ref17, keys.primary, 3), _defineProperty(_ref17, 'pull', { friends: 2 }), _ref17)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).friends, [], 'related ID pulled');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref18;

  (0, _tapdance.comment)('update many to many (set)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref18 = {}, _defineProperty(_ref18, keys.primary, 1), _defineProperty(_ref18, 'replace', { friends: [2, 3] }), _ref18)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).friends.sort(function (a, b) {
        return a - b;
      }), [2, 3], 'field set');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).friends.sort(function (a, b) {
        return a - b;
      }), [1, 3], 'related field pushed');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      }).friends.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'field unchanged');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref19;

  (0, _tapdance.comment)('update many to many (unset)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2, 3], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref19 = {}, _defineProperty(_ref19, keys.primary, 3), _defineProperty(_ref19, 'replace', { friends: [] }), _ref19)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).friends, [], 'related field pulled');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      }).friends, [], 'related field pulled');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      }).friends, [], 'field set');
    }
  });
});

(0, _tapdance.run)(function () {
  var _ref20;

  (0, _tapdance.comment)('update many to many (denormalized inverse)');
  return updateTest({
    change: function change(data) {
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2, 3], 'change event shows updated IDs');
    },
    type: 'user',
    payload: [(_ref20 = {}, _defineProperty(_ref20, keys.primary, 1), _defineProperty(_ref20, 'replace', { enemies: [2, 3] }), _ref20)],
    relatedType: 'user',
    related: function related(response) {
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      }).enemies.sort(function (a, b) {
        return a - b;
      }), [2, 3], 'field set');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 1;
      })['__user_enemies_inverse'], [], 'denormalized inverse field exists');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 2;
      })['__user_enemies_inverse'], [1], 'related field updated');
      (0, _helpers.deepEqual)(arrayProxy.find(response.payload, function (record) {
        return record[keys.primary] === 3;
      })['__user_enemies_inverse'].sort(function (a, b) {
        return a - b;
      }), [1, 2], 'related field updated');
    }
  });
});

function updateTest(o) {
  var store = undefined;

  return (0, _test_instance2['default'])().then(function (instance) {
    store = instance;

    if (o.change) store.on(_libCommonChange2['default'], function (data) {
      return o.change(data);
    });

    return store.request({
      method: methods.update,
      type: o.type,
      payload: o.payload
    });
  }).then(function () {
    return store.request({
      type: o.relatedType,
      method: methods.find
    });
  }).then(function (response) {
    return o.related(response);
  }).then(function () {
    return store.disconnect();
  })['catch'](function (error) {
    stderr.error(error);
    store.disconnect();
    (0, _tapdance.fail)(error);
  });
}