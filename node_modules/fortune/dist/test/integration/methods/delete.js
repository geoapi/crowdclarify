'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _tapdance = require('tapdance');

var _helpers = require('../../helpers');

var _test_instance = require('../test_instance');

var _test_instance2 = _interopRequireDefault(_test_instance);

var _stderr = require('../../stderr');

var stderr = _interopRequireWildcard(_stderr);

var _libCommonArray_proxy = require('../../../lib/common/array_proxy');

var arrayProxy = _interopRequireWildcard(_libCommonArray_proxy);

var _libCommonMethods = require('../../../lib/common/methods');

var methods = _interopRequireWildcard(_libCommonMethods);

var _libCommonChange = require('../../../lib/common/change');

var _libCommonChange2 = _interopRequireDefault(_libCommonChange);

(0, _tapdance.run)(function () {
  (0, _tapdance.comment)('delete record');

  var store = undefined;

  return (0, _test_instance2['default'])().then(function (instance) {
    store = instance;

    store.on(_libCommonChange2['default'], function (data) {
      (0, _helpers.ok)(arrayProxy.find(data[methods['delete']].user, function (id) {
        return id === 3;
      }), 'change event shows deleted ID');
      (0, _helpers.deepEqual)(data[methods.update].user.sort(function (a, b) {
        return a - b;
      }), [1, 2], 'change event shows updated IDs');
    });

    return store.request({
      type: 'user',
      method: methods['delete'],
      ids: [3]
    });
  }).then(function (response) {
    (0, _helpers.equal)(response.payload.length, 1, 'records deleted');

    return store.request({
      type: 'user',
      method: methods.find,
      ids: [1, 2]
    });
  }).then(function (response) {
    (0, _helpers.deepEqual)(response.payload.map(function (record) {
      return arrayProxy.find(record.friends, function (id) {
        return id === 3;
      });
    }), [undefined, undefined], 'related records updated');

    return store.disconnect();
  })['catch'](function (error) {
    stderr.error(error);
    store.disconnect();
    (0, _tapdance.fail)(error);
  });
});